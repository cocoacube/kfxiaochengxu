{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/gradient/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/gradient/source/font/Typodermic - GoodTimesRg-Regular.otf","path":"font/Typodermic - GoodTimesRg-Regular.otf","modified":1,"renderable":1},{"_id":"themes/gradient/source/img/cursor.png","path":"img/cursor.png","modified":1,"renderable":1},{"_id":"themes/gradient/source/img/cursor_hand.png","path":"img/cursor_hand.png","modified":1,"renderable":1},{"_id":"themes/gradient/source/font/Typodermic - GoodTimesRg-Regular.ttf","path":"font/Typodermic - GoodTimesRg-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/gradient/source/img/default.jpg","path":"img/default.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/gradient/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1540962529000},{"_id":"themes/gradient/README.md","hash":"819b01874323202c85e87e1111e21c1af396bc10","modified":1540962529000},{"_id":"themes/gradient/_config.yml","hash":"7179b510024b6dd254a679da734066dfe323924b","modified":1541553905000},{"_id":"source/_posts/hello-world.md","hash":"4780c53e99d030a8dd2d39e23844c75e38edf18b","modified":1541126974000},{"_id":"source/_posts/倒计时按钮.md","hash":"8f2c3c38293024a9249b904b7202985ba2a1cd52","modified":1541126411000},{"_id":"source/_posts/关于slot插槽.md","hash":"e322ac914880d691ad9b30b70a069d93d352953a","modified":1541960819620},{"_id":"source/_posts/开发小程序准备工作.md","hash":"f3a161d953b66ff70e54abe7b2cd4d05d958a202","modified":1541958883345},{"_id":"themes/gradient/layout/archive.ejs","hash":"13050e627093d56a1473797a20ccae7fc4a37faa","modified":1540962529000},{"_id":"themes/gradient/layout/index.ejs","hash":"6ee63e954ba1a70aabb68803e129824a002e0a2e","modified":1540962529000},{"_id":"themes/gradient/layout/layout.ejs","hash":"bbfd2d3029788deb1fc5f41aff84518b15b4a192","modified":1540962529000},{"_id":"themes/gradient/layout/post.ejs","hash":"6cb567e02e6e3af5ce112f211cdce2755c9dd28d","modified":1541127097000},{"_id":"themes/gradient/layout/_partial/after-footer.ejs","hash":"a00d0989a19017c00d22430a70a7f2e9bd71ef85","modified":1540962529000},{"_id":"themes/gradient/layout/_partial/article-archive.ejs","hash":"a706094e18ae652416ce004cc3ee2c418944d388","modified":1540962529000},{"_id":"themes/gradient/layout/_partial/article-excerpt.ejs","hash":"8cb7fe108cda8da8d2f30a1777f3eb62e6c08fee","modified":1540962529000},{"_id":"themes/gradient/layout/_partial/article-full.ejs","hash":"ae1b64f3aab90466e72d96866036eaeb8631a027","modified":1541128319000},{"_id":"themes/gradient/layout/_partial/categories.ejs","hash":"4e879151244e64112b39674361b61c413d7e7414","modified":1540962529000},{"_id":"themes/gradient/layout/_partial/footer.ejs","hash":"12962717254c0d50496d6c2a6ca1c8e1aff85f29","modified":1540962529000},{"_id":"themes/gradient/layout/_partial/head.ejs","hash":"5cd381d23b28772af8927521d6ff65cb776b38a4","modified":1540962529000},{"_id":"themes/gradient/layout/_partial/menu.ejs","hash":"c0e4b57417224688e53071a5031c395f30676ad2","modified":1540962529000},{"_id":"themes/gradient/layout/_partial/pagination-post.ejs","hash":"50af809c968361c70c69368231a36e7ea684228f","modified":1540962529000},{"_id":"themes/gradient/layout/_partial/pagination.ejs","hash":"e6231150e7ad1fba0a125f8cdde36d7fb602fbf4","modified":1540962529000},{"_id":"themes/gradient/layout/_partial/tags.ejs","hash":"5be1ad3ffcc0cbd3ac565093d47bc56b80c28b6e","modified":1540962529000},{"_id":"themes/gradient/source/css/style.css","hash":"1c7a564b9feb838f91bcb7b182351e8027076a74","modified":1540962529000},{"_id":"themes/gradient/source/font/Typodermic - GoodTimesRg-Regular.otf","hash":"02074c129dc31d24cc6e30d017f2bfd9db621878","modified":1540962529000},{"_id":"themes/gradient/source/img/cursor.png","hash":"081ab7840a005a9af971d402990b40c110bb7254","modified":1540962529000},{"_id":"themes/gradient/source/img/cursor_hand.png","hash":"d93c7aeadfb95732e827b4d557cccd65a1523f10","modified":1540962529000},{"_id":"themes/gradient/source/font/Typodermic - GoodTimesRg-Regular.ttf","hash":"59511caffaea7d98c944fc166882e80f85566d11","modified":1540962529000},{"_id":"themes/gradient/source/img/default.jpg","hash":"74460c0a15a218b6b01173755061d81f8f5dff5b","modified":1540962529000},{"_id":"public/post-sitemap.xml","hash":"23735175bda97e0dc5e9da5bac593d77a312aaf0","modified":1541960834451},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1541960834452},{"_id":"public/sitemap.xml","hash":"3f21da2389b9c7fd51c7d54889b30a25d17c5cdd","modified":1541960834494},{"_id":"public/2018/11/12/关于slot插槽/index.html","hash":"0ff81c705b225ed0a9fd8ca11217af836abd730d","modified":1541960834525},{"_id":"public/2018/11/12/开发小程序准备工作/index.html","hash":"d2dad1a31edf4603227a05ca5471df1d2af07a01","modified":1541960834525},{"_id":"public/2017/10/28/hello-world/index.html","hash":"525520d79978fc7f600cdec9fc75e7fc78ff3291","modified":1541960834525},{"_id":"public/archives/index.html","hash":"e13323f7cad0e7678dd3d5380fdd2c9857a20075","modified":1541960834526},{"_id":"public/archives/2017/index.html","hash":"841947dc60ab5073c66f04457ed887307bd5f34d","modified":1541960834526},{"_id":"public/archives/2017/10/index.html","hash":"74aefc672fbd8015128ac7a1a3b80f07f751656a","modified":1541960834526},{"_id":"public/archives/2018/index.html","hash":"15d1bbdccfbd924c66ee8feea1290f1b67970aef","modified":1541960834526},{"_id":"public/archives/2018/11/index.html","hash":"ca6cb0c914c76f107ba18d38369b853536c3a593","modified":1541960834526},{"_id":"public/index.html","hash":"cc8bdad227ea17579ea62a94576b37915b4f2170","modified":1541960834526},{"_id":"public/2018/11/01/倒计时按钮/index.html","hash":"a2a82108e343dbe322cdec153a559fe6b8023572","modified":1541960834526},{"_id":"public/img/cursor.png","hash":"081ab7840a005a9af971d402990b40c110bb7254","modified":1541960834530},{"_id":"public/img/cursor_hand.png","hash":"d93c7aeadfb95732e827b4d557cccd65a1523f10","modified":1541960834530},{"_id":"public/css/prism-okaidia.css","hash":"e6ba835f5a5b5506158830c5df7e8ff875ed12e4","modified":1541960834530},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1541960834530},{"_id":"public/font/Typodermic - GoodTimesRg-Regular.otf","hash":"02074c129dc31d24cc6e30d017f2bfd9db621878","modified":1541960834534},{"_id":"public/font/Typodermic - GoodTimesRg-Regular.ttf","hash":"59511caffaea7d98c944fc166882e80f85566d11","modified":1541960834535},{"_id":"public/css/style.css","hash":"1c7a564b9feb838f91bcb7b182351e8027076a74","modified":1541960834538},{"_id":"public/img/default.jpg","hash":"74460c0a15a218b6b01173755061d81f8f5dff5b","modified":1541960834538}],"Category":[],"Data":[],"Page":[],"Post":[{"uuid":"ee3dda50-de49-11e8-b21e-7bfb8e621fb6","title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\nuuid: ee3dda50-de49-11e8-b21e-7bfb8e621fb6\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-10-28T00:39:58.000Z","updated":"2018-11-02T02:49:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjod7o26b00008xfyp6d35kmh","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo server\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo generate\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo deploy\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n\nQuick Start\nCreate a new post\n$ hexo new \"My New Post\"\n\n\nMore info: Writing\n\nRun server\n$ hexo server\n\n\n","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"uuid":"9e788430-de48-11e8-98ff-33eb863de5d7","title":"微信小程序倒计时按钮","date":"2018-11-01T15:58:22.000Z","_content":"\n日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。\n\n\n\n#### CountdownButton 基础代码\n\n\n```html\n<button class='countdown-btn' bindtap='sendCode' disabled='{{isCounting}}'>\n   <text hidden='{{isCounting}}'>{{text}}</text> \n   <text hidden='{{!isCounting}}'>{{countdownText}}</text>\n</button>\t\n\n```\n\n上面的代码有几个变量的绑定，bindtap绑定了一个sendCode方法，disabled绑定了isCounting变量。isCounting主要用来指示CountdownButton的状态。剩余两个变量text和countdownText分别用来展示按钮在不同状态时所显示的内容。\n\n#### Step 1\n\n第一步需要将上面的基础代码放入到 .wxml文件中想要显示的位置。\n\n#### Step 2\n\n第二步打开.js文件，在data域中声明上面需要绑定的几个变量：isCounting, text, countdownText。\n除了这三个变量，我们还增加了一个countdownDuration的值，这个值用来设定倒计时时长，此处我们默认设置了10秒钟。\n\n\n```javascript\n\t//index.js\n\tconst app = getApp()\n\n\tPage({\n\t  data: {\n\t    ...\n\t    isCounting: false,\n\t    countdownText: '0s',\n\t    text: '获取验证码',\n\t    countdownDuration: 10,\n\t    ...\n\n\t  },\n\n\t  ...\n\t})\n```\n\n#### Step 3\n\n第三步我们需要实现sendCode的逻辑代码。在sendCode方法中，首先我们使用了Date.now()获取了点击按钮那一时刻的时间，并且存在了start变量中（这里的时间是milliseconds）。我们希望这个倒计时按钮可以每一秒钟都更新倒计时状态，为了达成这个目标，我们使用了setInterval方法。setInterval方法需要传入一个function和一个每次重复的时间间隔（单位是milliseconds）。这里我们把重复的时间间隔设定为1000 milliseconds，也就是1秒。\n\n在传入的方法内部，我们首先要做的是获取当前时刻的时间，然后与start做差获得时间差（单位milliseconds），简单的数学运算后我们可以得到流逝的时间。Math.round方法主要用来将float数变成整数。在if逻辑判断中，当流逝的时间差小于我们初始设定的间隔时间（countdownDuration: 10）时，我们更新isCounting状态为true，并且对应的更新countdownText的值。直到时间差超过了10秒，我们将isCounting状态设置回false，表明按钮恢复到可点击状态。\n\nclearInterval方法是对setInterval进行终止的操作。\n\n\n```javascript\n\n\t//index.js\n\tconst app = getApp()\n\n\tPage({\n\t  data: {\n\t  \t...\n\t    \n\t    isCounting: false,\n\t    countdownText: '0s',\n\t    text: '获取验证码',\n\t    countdownDuration: 10,\n\n\t    ...\n\t  },\n\n\t  sendCode: function(){\n\t    console.log('code sent');\n\n\t    var start = Date.now();\n\n\t    let globalThis = this;\n\t    var repeat = setInterval(function () { \n\t      var now = Date.now();\n\t      var seconds = Math.round((now - start)/1000);\n\n\t      console.log(seconds);\n\n\t      if (seconds < globalThis.data.countdownDuration) {\n\t        globalThis.setData({\n\t          isCounting: true,\n\t          countdownText: `${globalThis.data.countdownDuration - seconds} s`,\n\t        });\n\t      }else {\n\t        globalThis.setData({\n\t          isCounting: false,\n\t          countdownText: `10 s`\n\t        })\n\t        clearInterval(repeat);\n\t      }\n\n\t    }, 1000);\n\t  }\n\t})\n\n```\n\n\n代码中的 let globalThis = this 需要理解。在setInterval中的function代码，其实已经创建了一个新的子域，this只能调用这个子域中的变量。因此我们需要在进入子域前，将最外层域的this存到globalThis中，如此操作才可以获取到data中对应的变量和方法。\n\n\n到此，一个倒计时按钮就做好了！\n\n[点击下载案例代码](https://www.haoqigood.com)\n\n\n\n\n\n","source":"_posts/倒计时按钮.md","raw":"---\nuuid: 9e788430-de48-11e8-98ff-33eb863de5d7\ntitle: 微信小程序倒计时按钮\ndate: 2018-11-01 23:58:22\ntags:\n---\n\n日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。\n\n\n\n#### CountdownButton 基础代码\n\n\n```html\n<button class='countdown-btn' bindtap='sendCode' disabled='{{isCounting}}'>\n   <text hidden='{{isCounting}}'>{{text}}</text> \n   <text hidden='{{!isCounting}}'>{{countdownText}}</text>\n</button>\t\n\n```\n\n上面的代码有几个变量的绑定，bindtap绑定了一个sendCode方法，disabled绑定了isCounting变量。isCounting主要用来指示CountdownButton的状态。剩余两个变量text和countdownText分别用来展示按钮在不同状态时所显示的内容。\n\n#### Step 1\n\n第一步需要将上面的基础代码放入到 .wxml文件中想要显示的位置。\n\n#### Step 2\n\n第二步打开.js文件，在data域中声明上面需要绑定的几个变量：isCounting, text, countdownText。\n除了这三个变量，我们还增加了一个countdownDuration的值，这个值用来设定倒计时时长，此处我们默认设置了10秒钟。\n\n\n```javascript\n\t//index.js\n\tconst app = getApp()\n\n\tPage({\n\t  data: {\n\t    ...\n\t    isCounting: false,\n\t    countdownText: '0s',\n\t    text: '获取验证码',\n\t    countdownDuration: 10,\n\t    ...\n\n\t  },\n\n\t  ...\n\t})\n```\n\n#### Step 3\n\n第三步我们需要实现sendCode的逻辑代码。在sendCode方法中，首先我们使用了Date.now()获取了点击按钮那一时刻的时间，并且存在了start变量中（这里的时间是milliseconds）。我们希望这个倒计时按钮可以每一秒钟都更新倒计时状态，为了达成这个目标，我们使用了setInterval方法。setInterval方法需要传入一个function和一个每次重复的时间间隔（单位是milliseconds）。这里我们把重复的时间间隔设定为1000 milliseconds，也就是1秒。\n\n在传入的方法内部，我们首先要做的是获取当前时刻的时间，然后与start做差获得时间差（单位milliseconds），简单的数学运算后我们可以得到流逝的时间。Math.round方法主要用来将float数变成整数。在if逻辑判断中，当流逝的时间差小于我们初始设定的间隔时间（countdownDuration: 10）时，我们更新isCounting状态为true，并且对应的更新countdownText的值。直到时间差超过了10秒，我们将isCounting状态设置回false，表明按钮恢复到可点击状态。\n\nclearInterval方法是对setInterval进行终止的操作。\n\n\n```javascript\n\n\t//index.js\n\tconst app = getApp()\n\n\tPage({\n\t  data: {\n\t  \t...\n\t    \n\t    isCounting: false,\n\t    countdownText: '0s',\n\t    text: '获取验证码',\n\t    countdownDuration: 10,\n\n\t    ...\n\t  },\n\n\t  sendCode: function(){\n\t    console.log('code sent');\n\n\t    var start = Date.now();\n\n\t    let globalThis = this;\n\t    var repeat = setInterval(function () { \n\t      var now = Date.now();\n\t      var seconds = Math.round((now - start)/1000);\n\n\t      console.log(seconds);\n\n\t      if (seconds < globalThis.data.countdownDuration) {\n\t        globalThis.setData({\n\t          isCounting: true,\n\t          countdownText: `${globalThis.data.countdownDuration - seconds} s`,\n\t        });\n\t      }else {\n\t        globalThis.setData({\n\t          isCounting: false,\n\t          countdownText: `10 s`\n\t        })\n\t        clearInterval(repeat);\n\t      }\n\n\t    }, 1000);\n\t  }\n\t})\n\n```\n\n\n代码中的 let globalThis = this 需要理解。在setInterval中的function代码，其实已经创建了一个新的子域，this只能调用这个子域中的变量。因此我们需要在进入子域前，将最外层域的this存到globalThis中，如此操作才可以获取到data中对应的变量和方法。\n\n\n到此，一个倒计时按钮就做好了！\n\n[点击下载案例代码](https://www.haoqigood.com)\n\n\n\n\n\n","slug":"倒计时按钮","published":1,"updated":"2018-11-02T02:40:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjod7o26h00018xfy5spmg12g","content":"<p>日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。</p>\n<h4 id=\"CountdownButton-基础代码\"><a href=\"#CountdownButton-基础代码\" class=\"headerlink\" title=\"CountdownButton 基础代码\"></a>CountdownButton 基础代码</h4><pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>countdown-btn<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">bindtap</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>sendCode<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>{{isCounting}}<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>{{isCounting}}<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>{{text}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span> \n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>{{!isCounting}}<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>{{countdownText}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>    \n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码有几个变量的绑定，bindtap绑定了一个sendCode方法，disabled绑定了isCounting变量。isCounting主要用来指示CountdownButton的状态。剩余两个变量text和countdownText分别用来展示按钮在不同状态时所显示的内容。</p>\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h4><p>第一步需要将上面的基础代码放入到 .wxml文件中想要显示的位置。</p>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h4><p>第二步打开.js文件，在data域中声明上面需要绑定的几个变量：isCounting, text, countdownText。<br>除了这三个变量，我们还增加了一个countdownDuration的值，这个值用来设定倒计时时长，此处我们默认设置了10秒钟。</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\" spellcheck=\"true\">//index.js</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">getApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        isCounting<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        countdownText<span class=\"token punctuation\">:</span> <span class=\"token string\">'0s'</span><span class=\"token punctuation\">,</span>\n        text<span class=\"token punctuation\">:</span> <span class=\"token string\">'获取验证码'</span><span class=\"token punctuation\">,</span>\n        countdownDuration<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h4><p>第三步我们需要实现sendCode的逻辑代码。在sendCode方法中，首先我们使用了Date.now()获取了点击按钮那一时刻的时间，并且存在了start变量中（这里的时间是milliseconds）。我们希望这个倒计时按钮可以每一秒钟都更新倒计时状态，为了达成这个目标，我们使用了setInterval方法。setInterval方法需要传入一个function和一个每次重复的时间间隔（单位是milliseconds）。这里我们把重复的时间间隔设定为1000 milliseconds，也就是1秒。</p>\n<p>在传入的方法内部，我们首先要做的是获取当前时刻的时间，然后与start做差获得时间差（单位milliseconds），简单的数学运算后我们可以得到流逝的时间。Math.round方法主要用来将float数变成整数。在if逻辑判断中，当流逝的时间差小于我们初始设定的间隔时间（countdownDuration: 10）时，我们更新isCounting状态为true，并且对应的更新countdownText的值。直到时间差超过了10秒，我们将isCounting状态设置回false，表明按钮恢复到可点击状态。</p>\n<p>clearInterval方法是对setInterval进行终止的操作。</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\">\n    <span class=\"token comment\" spellcheck=\"true\">//index.js</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">getApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>\n\n        isCounting<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        countdownText<span class=\"token punctuation\">:</span> <span class=\"token string\">'0s'</span><span class=\"token punctuation\">,</span>\n        text<span class=\"token punctuation\">:</span> <span class=\"token string\">'获取验证码'</span><span class=\"token punctuation\">,</span>\n        countdownDuration<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n      sendCode<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'code sent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> start <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> globalThis <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> repeat <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n          <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">var</span> seconds <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">&lt;</span> globalThis<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>countdownDuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            globalThis<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n              isCounting<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n              countdownText<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>globalThis<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>countdownDuration <span class=\"token operator\">-</span> seconds<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> s`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            globalThis<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n              isCounting<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n              countdownText<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`10 s`</span></span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码中的 let globalThis = this 需要理解。在setInterval中的function代码，其实已经创建了一个新的子域，this只能调用这个子域中的变量。因此我们需要在进入子域前，将最外层域的this存到globalThis中，如此操作才可以获取到data中对应的变量和方法。</p>\n<p>到此，一个倒计时按钮就做好了！</p>\n<p><a href=\"https://www.haoqigood.com\" target=\"_blank\" rel=\"noopener\">点击下载案例代码</a></p>\n","site":{"data":{}},"excerpt":"日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。\n\nCountdownButton 基础代码\n<button class='countdown-btn' bindtap='sendCode' disabled='{{isCounting}}'>\n   <text hidden='{{isCounting}}'>{{text}}</text> \n   <text hidden='{{!isCounting}}'>{{countdownText}}</text>\n</button>   ","more":"<p>日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。</p>\n<h4 id=\"CountdownButton-基础代码\"><a href=\"#CountdownButton-基础代码\" class=\"headerlink\" title=\"CountdownButton 基础代码\"></a>CountdownButton 基础代码</h4><pre><code class=\"html\">&lt;button class=&#39;countdown-btn&#39; bindtap=&#39;sendCode&#39; disabled=&#39;{{isCounting}}&#39;&gt;\n   &lt;text hidden=&#39;{{isCounting}}&#39;&gt;{{text}}&lt;/text&gt; \n   &lt;text hidden=&#39;{{!isCounting}}&#39;&gt;{{countdownText}}&lt;/text&gt;\n&lt;/button&gt;    \n\n</code></pre>\n<p>上面的代码有几个变量的绑定，bindtap绑定了一个sendCode方法，disabled绑定了isCounting变量。isCounting主要用来指示CountdownButton的状态。剩余两个变量text和countdownText分别用来展示按钮在不同状态时所显示的内容。</p>\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h4><p>第一步需要将上面的基础代码放入到 .wxml文件中想要显示的位置。</p>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h4><p>第二步打开.js文件，在data域中声明上面需要绑定的几个变量：isCounting, text, countdownText。<br>除了这三个变量，我们还增加了一个countdownDuration的值，这个值用来设定倒计时时长，此处我们默认设置了10秒钟。</p>\n<pre><code class=\"javascript\">    //index.js\n    const app = getApp()\n\n    Page({\n      data: {\n        ...\n        isCounting: false,\n        countdownText: &#39;0s&#39;,\n        text: &#39;获取验证码&#39;,\n        countdownDuration: 10,\n        ...\n\n      },\n\n      ...\n    })\n</code></pre>\n<h4 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h4><p>第三步我们需要实现sendCode的逻辑代码。在sendCode方法中，首先我们使用了Date.now()获取了点击按钮那一时刻的时间，并且存在了start变量中（这里的时间是milliseconds）。我们希望这个倒计时按钮可以每一秒钟都更新倒计时状态，为了达成这个目标，我们使用了setInterval方法。setInterval方法需要传入一个function和一个每次重复的时间间隔（单位是milliseconds）。这里我们把重复的时间间隔设定为1000 milliseconds，也就是1秒。</p>\n<p>在传入的方法内部，我们首先要做的是获取当前时刻的时间，然后与start做差获得时间差（单位milliseconds），简单的数学运算后我们可以得到流逝的时间。Math.round方法主要用来将float数变成整数。在if逻辑判断中，当流逝的时间差小于我们初始设定的间隔时间（countdownDuration: 10）时，我们更新isCounting状态为true，并且对应的更新countdownText的值。直到时间差超过了10秒，我们将isCounting状态设置回false，表明按钮恢复到可点击状态。</p>\n<p>clearInterval方法是对setInterval进行终止的操作。</p>\n<pre><code class=\"javascript\">\n    //index.js\n    const app = getApp()\n\n    Page({\n      data: {\n          ...\n\n        isCounting: false,\n        countdownText: &#39;0s&#39;,\n        text: &#39;获取验证码&#39;,\n        countdownDuration: 10,\n\n        ...\n      },\n\n      sendCode: function(){\n        console.log(&#39;code sent&#39;);\n\n        var start = Date.now();\n\n        let globalThis = this;\n        var repeat = setInterval(function () { \n          var now = Date.now();\n          var seconds = Math.round((now - start)/1000);\n\n          console.log(seconds);\n\n          if (seconds &lt; globalThis.data.countdownDuration) {\n            globalThis.setData({\n              isCounting: true,\n              countdownText: `${globalThis.data.countdownDuration - seconds} s`,\n            });\n          }else {\n            globalThis.setData({\n              isCounting: false,\n              countdownText: `10 s`\n            })\n            clearInterval(repeat);\n          }\n\n        }, 1000);\n      }\n    })\n\n</code></pre>\n<p>代码中的 let globalThis = this 需要理解。在setInterval中的function代码，其实已经创建了一个新的子域，this只能调用这个子域中的变量。因此我们需要在进入子域前，将最外层域的this存到globalThis中，如此操作才可以获取到data中对应的变量和方法。</p>\n<p>到此，一个倒计时按钮就做好了！</p>\n<p><a href=\"https://www.haoqigood.com\" target=\"_blank\" rel=\"noopener\">点击下载案例代码</a></p>\n"},{"uuid":"f216eca0-e5da-11e8-8bcd-fddcf839c3de","title":"关于slot插槽","date":"2018-11-11T17:55:16.000Z","_content":"\n### 关于Slot插槽\n\n\n\n笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。\n\n\n\nw3c中是这样定义slot的：\n\n------\n\nDefinitions\n\nThese are the new definitions. For all other definitions, consult current [spec](http://w3c.github.io/webcomponents/spec/shadow/).\n\n- **slot** -- a defined location in a shadow tree. Represented by the `slot` element.\n- **slot name** -- the name of a **slot**.\n- **default slot** -- a **slot** for assigning nodes without a **slot name**.\n\n------\n\n意思是说，slot在语法树中定义了一个影位，这个影位用slot标签展示。\n\n初学HTML的朋友可能不太常见到slot标签，大多数看到的是div, h1,  img等最常用的标签，但事实上在使用div标签的时候，就已经运用了类似slot功能。因为一个div标签在定义的时候就在内部增加了slot插槽，这使得我们可以在div内部放其它的标签。\n\n\n\n举例：\n\n我们定义一个自己的component（组件）\n\n```html\n<template id=\"cool-component\">\n    <p> Here is all my cool stuff</p>\n</template>\n```\n\n上面我们使用template标签定义了一个最简单的component，名字叫cool-component。\n\n这个component只有一个功能，就是展示我们想要展示的话。初学web编程的朋友可能会问：我们为什么要如此复杂的为了一句话来写这么长的代码？这样的疑问提出的完全正确！因为为了一句话写一个component就是画蛇添足。不过这里只是举例子，因为component使用的场景，应该是更复杂的地方。比如在为大的企业开发网站时，由于多个页面会展示相同的企业信息或别的可以复用的内容，如果每次去写，就太麻烦了。这时候我们会定义一个component，来提高开发效率。所以用component的场景是component内容需要多次被复用，并且可以封装的情况下，我们去定义它。团队协作中，使用component也可以大大提升开发的效率。\n\n\n\n当我们在代码中引用cool-component标签时：\n\n```html\n<div>\n\t<cool-component/>\n</div>\n```\n\n对应翻译到网页上的代码是：\n\n```html\n<div>\n\t<p> Here is all my cool stuff</p>\n</div>\n```\n\n\n\n但是只显示cool-component标签内已经定义好的static文字，似乎有点单调。该怎么修改呢？\n\n我们对cool-component做一点点调整，这里我们会用到slot标签。\n\n```html\n<template id=\"cool-component\">\n\t<slot></slot>\n</template>\n```\n\n\n\n可以看到我们将原有的p标签替换成了slot标签。那么有什么用呢？\n\n我们来看看现在如何使用新构造的cool-component:\n\n\n\n在cool-component中添加一个按钮：\n\n```html\n<div>\n    <cool-component>\n        <button>Super cool button</button>\n    </cool-component>\n</div>\n```\n\n\n\n在cool-component中加一段文字：\n\n```html\n<div>\n    <cool-component>\n        <p>You are awesome!</p>\n    </cool-component>\n</div>\n```\n\n\n\n你还可以在cool-component中增加各种你想要的内容。\n\n所以，slot为自定义component提供了功能的拓展，使得component的使用可以更加变化多端，功能强大。","source":"_posts/关于slot插槽.md","raw":"---\nuuid: f216eca0-e5da-11e8-8bcd-fddcf839c3de\ntitle: 关于slot插槽\ndate: 2018-11-12 01:55:16\ntags:\n---\n\n### 关于Slot插槽\n\n\n\n笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。\n\n\n\nw3c中是这样定义slot的：\n\n------\n\nDefinitions\n\nThese are the new definitions. For all other definitions, consult current [spec](http://w3c.github.io/webcomponents/spec/shadow/).\n\n- **slot** -- a defined location in a shadow tree. Represented by the `slot` element.\n- **slot name** -- the name of a **slot**.\n- **default slot** -- a **slot** for assigning nodes without a **slot name**.\n\n------\n\n意思是说，slot在语法树中定义了一个影位，这个影位用slot标签展示。\n\n初学HTML的朋友可能不太常见到slot标签，大多数看到的是div, h1,  img等最常用的标签，但事实上在使用div标签的时候，就已经运用了类似slot功能。因为一个div标签在定义的时候就在内部增加了slot插槽，这使得我们可以在div内部放其它的标签。\n\n\n\n举例：\n\n我们定义一个自己的component（组件）\n\n```html\n<template id=\"cool-component\">\n    <p> Here is all my cool stuff</p>\n</template>\n```\n\n上面我们使用template标签定义了一个最简单的component，名字叫cool-component。\n\n这个component只有一个功能，就是展示我们想要展示的话。初学web编程的朋友可能会问：我们为什么要如此复杂的为了一句话来写这么长的代码？这样的疑问提出的完全正确！因为为了一句话写一个component就是画蛇添足。不过这里只是举例子，因为component使用的场景，应该是更复杂的地方。比如在为大的企业开发网站时，由于多个页面会展示相同的企业信息或别的可以复用的内容，如果每次去写，就太麻烦了。这时候我们会定义一个component，来提高开发效率。所以用component的场景是component内容需要多次被复用，并且可以封装的情况下，我们去定义它。团队协作中，使用component也可以大大提升开发的效率。\n\n\n\n当我们在代码中引用cool-component标签时：\n\n```html\n<div>\n\t<cool-component/>\n</div>\n```\n\n对应翻译到网页上的代码是：\n\n```html\n<div>\n\t<p> Here is all my cool stuff</p>\n</div>\n```\n\n\n\n但是只显示cool-component标签内已经定义好的static文字，似乎有点单调。该怎么修改呢？\n\n我们对cool-component做一点点调整，这里我们会用到slot标签。\n\n```html\n<template id=\"cool-component\">\n\t<slot></slot>\n</template>\n```\n\n\n\n可以看到我们将原有的p标签替换成了slot标签。那么有什么用呢？\n\n我们来看看现在如何使用新构造的cool-component:\n\n\n\n在cool-component中添加一个按钮：\n\n```html\n<div>\n    <cool-component>\n        <button>Super cool button</button>\n    </cool-component>\n</div>\n```\n\n\n\n在cool-component中加一段文字：\n\n```html\n<div>\n    <cool-component>\n        <p>You are awesome!</p>\n    </cool-component>\n</div>\n```\n\n\n\n你还可以在cool-component中增加各种你想要的内容。\n\n所以，slot为自定义component提供了功能的拓展，使得component的使用可以更加变化多端，功能强大。","slug":"关于slot插槽","published":1,"updated":"2018-11-11T18:26:59.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjod7o26k00028xfy3j7pbe00","content":"<h3 id=\"关于Slot插槽\"><a href=\"#关于Slot插槽\" class=\"headerlink\" title=\"关于Slot插槽\"></a>关于Slot插槽</h3><p>笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。</p>\n<p>w3c中是这样定义slot的：</p>\n<hr>\n<p>Definitions</p>\n<p>These are the new definitions. For all other definitions, consult current <a href=\"http://w3c.github.io/webcomponents/spec/shadow/\" target=\"_blank\" rel=\"noopener\">spec</a>.</p>\n<ul>\n<li><strong>slot</strong> – a defined location in a shadow tree. Represented by the <code>slot</code> element.</li>\n<li><strong>slot name</strong> – the name of a <strong>slot</strong>.</li>\n<li><strong>default slot</strong> – a <strong>slot</strong> for assigning nodes without a <strong>slot name</strong>.</li>\n</ul>\n<hr>\n<p>意思是说，slot在语法树中定义了一个影位，这个影位用slot标签展示。</p>\n<p>初学HTML的朋友可能不太常见到slot标签，大多数看到的是div, h1,  img等最常用的标签，但事实上在使用div标签的时候，就已经运用了类似slot功能。因为一个div标签在定义的时候就在内部增加了slot插槽，这使得我们可以在div内部放其它的标签。</p>\n<p>举例：</p>\n<p>我们定义一个自己的component（组件）</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cool-component<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> Here is all my cool stuff<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面我们使用template标签定义了一个最简单的component，名字叫cool-component。</p>\n<p>这个component只有一个功能，就是展示我们想要展示的话。初学web编程的朋友可能会问：我们为什么要如此复杂的为了一句话来写这么长的代码？这样的疑问提出的完全正确！因为为了一句话写一个component就是画蛇添足。不过这里只是举例子，因为component使用的场景，应该是更复杂的地方。比如在为大的企业开发网站时，由于多个页面会展示相同的企业信息或别的可以复用的内容，如果每次去写，就太麻烦了。这时候我们会定义一个component，来提高开发效率。所以用component的场景是component内容需要多次被复用，并且可以封装的情况下，我们去定义它。团队协作中，使用component也可以大大提升开发的效率。</p>\n<p>当我们在代码中引用cool-component标签时：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cool-component</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>对应翻译到网页上的代码是：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> Here is all my cool stuff<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>但是只显示cool-component标签内已经定义好的static文字，似乎有点单调。该怎么修改呢？</p>\n<p>我们对cool-component做一点点调整，这里我们会用到slot标签。</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cool-component<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>可以看到我们将原有的p标签替换成了slot标签。那么有什么用呢？</p>\n<p>我们来看看现在如何使用新构造的cool-component:</p>\n<p>在cool-component中添加一个按钮：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cool-component</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>Super cool button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cool-component</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在cool-component中加一段文字：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cool-component</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>You are awesome!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cool-component</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>你还可以在cool-component中增加各种你想要的内容。</p>\n<p>所以，slot为自定义component提供了功能的拓展，使得component的使用可以更加变化多端，功能强大。</p>\n","site":{"data":{}},"excerpt":"关于Slot插槽\n笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。\n\nw3c中是这样定义slot的：\n\n\n\n\nDefinitions\n\nThese are the new definitions. For all other definitions, consult current spec.\n\n * slot – a defined location in a shadow tree. Represented by the slot element.\n * slot name – the name","more":"<h3 id=\"关于Slot插槽\"><a href=\"#关于Slot插槽\" class=\"headerlink\" title=\"关于Slot插槽\"></a>关于Slot插槽</h3><p>笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。</p>\n<p>w3c中是这样定义slot的：</p>\n<hr>\n<p>Definitions</p>\n<p>These are the new definitions. For all other definitions, consult current <a href=\"http://w3c.github.io/webcomponents/spec/shadow/\" target=\"_blank\" rel=\"noopener\">spec</a>.</p>\n<ul>\n<li><strong>slot</strong> – a defined location in a shadow tree. Represented by the <code>slot</code> element.</li>\n<li><strong>slot name</strong> – the name of a <strong>slot</strong>.</li>\n<li><strong>default slot</strong> – a <strong>slot</strong> for assigning nodes without a <strong>slot name</strong>.</li>\n</ul>\n<hr>\n<p>意思是说，slot在语法树中定义了一个影位，这个影位用slot标签展示。</p>\n<p>初学HTML的朋友可能不太常见到slot标签，大多数看到的是div, h1,  img等最常用的标签，但事实上在使用div标签的时候，就已经运用了类似slot功能。因为一个div标签在定义的时候就在内部增加了slot插槽，这使得我们可以在div内部放其它的标签。</p>\n<p>举例：</p>\n<p>我们定义一个自己的component（组件）</p>\n<pre><code class=\"html\">&lt;template id=&quot;cool-component&quot;&gt;\n    &lt;p&gt; Here is all my cool stuff&lt;/p&gt;\n&lt;/template&gt;\n</code></pre>\n<p>上面我们使用template标签定义了一个最简单的component，名字叫cool-component。</p>\n<p>这个component只有一个功能，就是展示我们想要展示的话。初学web编程的朋友可能会问：我们为什么要如此复杂的为了一句话来写这么长的代码？这样的疑问提出的完全正确！因为为了一句话写一个component就是画蛇添足。不过这里只是举例子，因为component使用的场景，应该是更复杂的地方。比如在为大的企业开发网站时，由于多个页面会展示相同的企业信息或别的可以复用的内容，如果每次去写，就太麻烦了。这时候我们会定义一个component，来提高开发效率。所以用component的场景是component内容需要多次被复用，并且可以封装的情况下，我们去定义它。团队协作中，使用component也可以大大提升开发的效率。</p>\n<p>当我们在代码中引用cool-component标签时：</p>\n<pre><code class=\"html\">&lt;div&gt;\n    &lt;cool-component/&gt;\n&lt;/div&gt;\n</code></pre>\n<p>对应翻译到网页上的代码是：</p>\n<pre><code class=\"html\">&lt;div&gt;\n    &lt;p&gt; Here is all my cool stuff&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>但是只显示cool-component标签内已经定义好的static文字，似乎有点单调。该怎么修改呢？</p>\n<p>我们对cool-component做一点点调整，这里我们会用到slot标签。</p>\n<pre><code class=\"html\">&lt;template id=&quot;cool-component&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n&lt;/template&gt;\n</code></pre>\n<p>可以看到我们将原有的p标签替换成了slot标签。那么有什么用呢？</p>\n<p>我们来看看现在如何使用新构造的cool-component:</p>\n<p>在cool-component中添加一个按钮：</p>\n<pre><code class=\"html\">&lt;div&gt;\n    &lt;cool-component&gt;\n        &lt;button&gt;Super cool button&lt;/button&gt;\n    &lt;/cool-component&gt;\n&lt;/div&gt;\n</code></pre>\n<p>在cool-component中加一段文字：</p>\n<pre><code class=\"html\">&lt;div&gt;\n    &lt;cool-component&gt;\n        &lt;p&gt;You are awesome!&lt;/p&gt;\n    &lt;/cool-component&gt;\n&lt;/div&gt;\n</code></pre>\n<p>你还可以在cool-component中增加各种你想要的内容。</p>\n<p>所以，slot为自定义component提供了功能的拓展，使得component的使用可以更加变化多端，功能强大。</p>\n"},{"uuid":"7e0ee750-e5d9-11e8-b292-9d2d6db634c5","title":"开发小程序准备工作","date":"2018-11-11T17:44:52.000Z","_content":"\n\n\n[官方教程](https://developers.weixin.qq.com/miniprogram/dev/)\n\n\n\n#### Step 1 | 申请开发者账号\n\n为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。\n\n\n\n#### Step 2 | 下载开发工具\n\n[小程序开发工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18110616)\n\n在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。\n\n\n\n#### Step 3 | 开始开发\n\n打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。","source":"_posts/开发小程序准备工作.md","raw":"---\nuuid: 7e0ee750-e5d9-11e8-b292-9d2d6db634c5\ntitle: 开发小程序准备工作\ndate: 2018-11-12 01:44:52\ntags:\n---\n\n\n\n[官方教程](https://developers.weixin.qq.com/miniprogram/dev/)\n\n\n\n#### Step 1 | 申请开发者账号\n\n为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。\n\n\n\n#### Step 2 | 下载开发工具\n\n[小程序开发工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18110616)\n\n在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。\n\n\n\n#### Step 3 | 开始开发\n\n打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。","slug":"开发小程序准备工作","published":1,"updated":"2018-11-11T17:54:43.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjod7o26l00038xfy154zm2pu","content":"<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h4 id=\"Step-1-申请开发者账号\"><a href=\"#Step-1-申请开发者账号\" class=\"headerlink\" title=\"Step 1 | 申请开发者账号\"></a>Step 1 | 申请开发者账号</h4><p>为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。</p>\n<h4 id=\"Step-2-下载开发工具\"><a href=\"#Step-2-下载开发工具\" class=\"headerlink\" title=\"Step 2 | 下载开发工具\"></a>Step 2 | 下载开发工具</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18110616\" target=\"_blank\" rel=\"noopener\">小程序开发工具</a></p>\n<p>在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。</p>\n<h4 id=\"Step-3-开始开发\"><a href=\"#Step-3-开始开发\" class=\"headerlink\" title=\"Step 3 | 开始开发\"></a>Step 3 | 开始开发</h4><p>打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。</p>\n","site":{"data":{}},"excerpt":"官方教程\n\nStep 1 | 申请开发者账号\n为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。\n\nStep 2 | 下载开发工具\n小程序开发工具\n\n在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。\n\nStep 3 | 开始开发\n打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。","more":"<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h4 id=\"Step-1-申请开发者账号\"><a href=\"#Step-1-申请开发者账号\" class=\"headerlink\" title=\"Step 1 | 申请开发者账号\"></a>Step 1 | 申请开发者账号</h4><p>为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。</p>\n<h4 id=\"Step-2-下载开发工具\"><a href=\"#Step-2-下载开发工具\" class=\"headerlink\" title=\"Step 2 | 下载开发工具\"></a>Step 2 | 下载开发工具</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18110616\" target=\"_blank\" rel=\"noopener\">小程序开发工具</a></p>\n<p>在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。</p>\n<h4 id=\"Step-3-开始开发\"><a href=\"#Step-3-开始开发\" class=\"headerlink\" title=\"Step 3 | 开始开发\"></a>Step 3 | 开始开发</h4><p>打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}