{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/minos/source/google48ad3f32ef9d84f8.html","path":"google48ad3f32ef9d84f8.html","modified":1,"renderable":1},{"_id":"themes/minos/source/images/check.svg","path":"images/check.svg","modified":1,"renderable":1},{"_id":"themes/minos/source/css/insight.scss","path":"css/insight.scss","modified":1,"renderable":1},{"_id":"themes/minos/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/minos/source/images/exclamation.svg","path":"images/exclamation.svg","modified":1,"renderable":1},{"_id":"themes/minos/source/images/info.svg","path":"images/info.svg","modified":1,"renderable":1},{"_id":"themes/minos/source/images/question.svg","path":"images/question.svg","modified":1,"renderable":1},{"_id":"themes/minos/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/minos/source/img/asuka01.png","path":"img/asuka01.png","modified":1,"renderable":1},{"_id":"themes/minos/source/images/quote-left.svg","path":"images/quote-left.svg","modified":1,"renderable":1},{"_id":"themes/minos/source/img/asuka02.png","path":"img/asuka02.png","modified":1,"renderable":1},{"_id":"themes/minos/source/img/asuka03.png","path":"img/asuka03.png","modified":1,"renderable":1},{"_id":"themes/minos/source/img/asukaui1.png","path":"img/asukaui1.png","modified":1,"renderable":1},{"_id":"themes/minos/source/img/countdownbutton.jpg","path":"img/countdownbutton.jpg","modified":1,"renderable":1},{"_id":"themes/minos/source/img/cursor_hand.png","path":"img/cursor_hand.png","modified":1,"renderable":1},{"_id":"themes/minos/source/img/cursor.png","path":"img/cursor.png","modified":1,"renderable":1},{"_id":"themes/minos/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/minos/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/minos/source/img/asuka04.png","path":"img/asuka04.png","modified":1,"renderable":1},{"_id":"themes/minos/source/img/asuka05.png","path":"img/asuka05.png","modified":1,"renderable":1},{"_id":"themes/minos/source/img/default.jpg","path":"img/default.jpg","modified":1,"renderable":1},{"_id":"themes/minos/source/img/startpage.png","path":"img/startpage.png","modified":1,"renderable":1},{"_id":"themes/minos/source/img/startpage1.png","path":"img/startpage1.png","modified":1,"renderable":1},{"_id":"themes/minos/source/img/wechatapp.jpg","path":"img/wechatapp.jpg","modified":1,"renderable":1},{"_id":"themes/minos/source/img/slot.jpg","path":"img/slot.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/minos/.gitignore","hash":"8b02e7219e2dd9b50d198819fd7d8f74ebc9db2a","modified":1544244418366},{"_id":"source/.DS_Store","hash":"a7cdf27d2ee9163d07b6766eb6765e459cc1c131","modified":1544244418364},{"_id":"themes/minos/LICENSE","hash":"ca01a2d52b59346e82f079c593df6cb26dd9a7a5","modified":1544244418366},{"_id":"themes/minos/README.md","hash":"ba6b4e134d718704cfd030e106bf24d6ef8b496d","modified":1544244418366},{"_id":"themes/minos/_config.yml.example","hash":"3be8445fd0d5508969f8c266f6be19cbf9c026ed","modified":1544244418366},{"_id":"themes/minos/package-lock.json","hash":"e1fbecec56fb65379bf651f21fb485376e692b38","modified":1544244418372},{"_id":"themes/minos/package.json","hash":"f9d450db80149dea6c372990cdf51dfde901e5cc","modified":1544244418372},{"_id":"source/_posts/从零开始开发你第一个微信小程序tutorial-part4.md","hash":"eabeb726e9118e62681573dcec99ecbb26b051a3","modified":1545044716131},{"_id":"source/_posts/hello-world.md","hash":"4780c53e99d030a8dd2d39e23844c75e38edf18b","modified":1544244418514},{"_id":"source/_posts/从零开始开发你第一个微信小程序教程tutorial-part1.md","hash":"402da47c3f9b84866dccabd7a0c4c0a33254f499","modified":1545044718398},{"_id":"source/_posts/从零开始开发你第一个微信小程序教程tutorial-part2.md","hash":"b87da41ce894d2dc7ff2f0a4246991c1813a2e60","modified":1545044720469},{"_id":"source/_posts/从零开始开发小程序tutorial-part3-后台.md","hash":"33bb6a4f2f2fdcc2c23e95838efa9ff3f6228fc9","modified":1545044722323},{"_id":"source/_posts/倒计时按钮.md","hash":"127274421e538a37e115c61fadbdd52c17f1943f","modified":1545469226491},{"_id":"source/_posts/关于slot插槽.md","hash":"a1dbe365ce106755869cd776367e676847c3e9e0","modified":1545044754581},{"_id":"source/_posts/开发小程序准备工作.md","hash":"f1bccca69cd536fb96454d29b4244921c7a3764b","modified":1545044742615},{"_id":"themes/minos/languages/en.yml","hash":"ef98c8674fed78f2350598ee8b15fcd53fbd2ae5","modified":1544244418366},{"_id":"themes/minos/languages/es.yml","hash":"5c35950221411e34e7a9821d0b0671da9a458d8c","modified":1544244418366},{"_id":"themes/minos/languages/ko.yml","hash":"1acf3f959f1d2b4f7a77e7e82851821aa8635362","modified":1544244418366},{"_id":"themes/minos/languages/ru.yml","hash":"8e5a58176bf943432ba6e4f1981d9b98fdea36a4","modified":1544244418367},{"_id":"themes/minos/layout/archive.ejs","hash":"e3eefe819d61b4d0ee069bb705a9f5707a8bf3da","modified":1544244418367},{"_id":"themes/minos/languages/zh-cn.yml","hash":"9c5a489b11a056d1ea7b9d4a0e127aef9e192ee4","modified":1544244418367},{"_id":"themes/minos/layout/categories.ejs","hash":"fff6f911d0f548ee749292bc1942f8fbbb1fbfe7","modified":1544244418367},{"_id":"themes/minos/layout/category.ejs","hash":"403c646878834964883ac41e63952f7b1595c0ba","modified":1544244418367},{"_id":"themes/minos/layout/index.ejs","hash":"dff9e199d394f82c5416b814f9e644edbe4090f0","modified":1544244418370},{"_id":"themes/minos/layout/layout.ejs","hash":"f31913a42957d4dfd679d6d29c37e133d005cf31","modified":1544244418370},{"_id":"themes/minos/layout/post.ejs","hash":"68b84a717efc5ca59ee9eb6202ccf05c5a8abda5","modified":1544244418370},{"_id":"themes/minos/layout/tag.ejs","hash":"5593c7cf9618ef5650c779ed9d75424f057aa210","modified":1544244418371},{"_id":"themes/minos/layout/tags.ejs","hash":"e4a9909119294f131a45f10b2cb1058af5fb9be1","modified":1544244418371},{"_id":"themes/minos/scripts/01_check.js","hash":"b26b19011a6eb61e61419331a7f9c5fdf553d830","modified":1544244418372},{"_id":"themes/minos/scripts/99_config.js","hash":"d41a5df0a442728fbc66514476fe043e416d7438","modified":1544244418372},{"_id":"themes/minos/scripts/10_i18n.js","hash":"346a09259e15913871e12c7418a639b8d65df570","modified":1544244418372},{"_id":"themes/minos/scripts/99_content.js","hash":"5d19de210e9172a9acb61667a26810899fce917d","modified":1544244418373},{"_id":"themes/minos/scripts/99_tags.js","hash":"91369a4d8376bc981a9bad9c5dde4b3e775e5cb5","modified":1544244418373},{"_id":"themes/minos/scripts/rfc5646.js","hash":"8ecf38d0ec7145720ea8e888da314131712770e8","modified":1544244418373},{"_id":"themes/minos/source/google48ad3f32ef9d84f8.html","hash":"60e5ca85d663bbf35cd06897b519273b0681954e","modified":1544244418373},{"_id":"themes/minos/layout/comment/facebook.ejs","hash":"e73b6f93d98b27ba9068c1685874ecccfbac737b","modified":1544244418368},{"_id":"themes/minos/layout/comment/disqus.ejs","hash":"a2becdc02214a673c804af93488489807fa2c99c","modified":1544244418368},{"_id":"themes/minos/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1544244418367},{"_id":"themes/minos/layout/comment/gitment.ejs","hash":"430416210933b7edcbfcc67ede4aa55539da2750","modified":1544244418368},{"_id":"themes/minos/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1544244418368},{"_id":"themes/minos/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1544244418368},{"_id":"themes/minos/layout/comment/valine.ejs","hash":"350f28986dd610ebdfdeb16dc618d1d034312af1","modified":1544244418368},{"_id":"themes/minos/layout/comment/youyan.ejs","hash":"3d6cf9c523a7a5510ec2864bb29f861f9bb78af3","modified":1544244418369},{"_id":"themes/minos/layout/common/article.ejs","hash":"38c9e039df056220655e337cb1808bbc7b72c927","modified":1544244418369},{"_id":"themes/minos/layout/common/footer.ejs","hash":"367c5f2e69c66d4d6fbd8beeade0b60024ce9e6e","modified":1544244418369},{"_id":"themes/minos/layout/common/head.ejs","hash":"1447e514eae24bfa4a80d598fea8b28674c4e873","modified":1544244418369},{"_id":"themes/minos/layout/common/languages.ejs","hash":"89665c656a1ffebc9c97f03e7f9c12dd1d90702a","modified":1544244418369},{"_id":"themes/minos/layout/common/navbar.ejs","hash":"965e931095896445a30aa404c7ff5295c127408a","modified":1544244418369},{"_id":"themes/minos/layout/common/paginator.ejs","hash":"8f5060e4c8a86a3f4e58455c41c98e831e23e4a4","modified":1544244418370},{"_id":"themes/minos/layout/common/scripts.ejs","hash":"7a5a5271930423b95046836597e30e31fa708f66","modified":1544244418370},{"_id":"themes/minos/layout/plugins/gallery.ejs","hash":"7c2becafdf6b60e677cdd5756b9d55eba2af4944","modified":1544244418370},{"_id":"themes/minos/layout/plugins/google-analytics.ejs","hash":"2a9d944a60aff7df27def5215bdc071e605c3c42","modified":1544244418370},{"_id":"themes/minos/layout/plugins/mathjax.ejs","hash":"b460310078d3506dce8dccc67310e3b9b3c124a9","modified":1544244418370},{"_id":"themes/minos/layout/search/insight.ejs","hash":"6fb7d27ef40145d8587b46b44a43516135b5a81a","modified":1544244418371},{"_id":"themes/minos/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1544244418371},{"_id":"themes/minos/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1544244418371},{"_id":"themes/minos/layout/search/google-cse.ejs","hash":"a6bf5c30339735126efa7efa684f9eb14dd6136a","modified":1544244418371},{"_id":"themes/minos/source/images/check.svg","hash":"029b8b3523b7daa4005983b4463cd93408308aab","modified":1544244418374},{"_id":"themes/minos/source/css/insight.scss","hash":"f785fc6574d2853c660be39b2e3149d4846b577f","modified":1544244418373},{"_id":"themes/minos/source/css/style.scss","hash":"1bda0b829dd9b7101cfdd5cba6af70e1051f5d77","modified":1544244418373},{"_id":"themes/minos/source/images/exclamation.svg","hash":"b2db56f2cc13fce73dbea46c7b446d9bcb3bf0fd","modified":1544244418374},{"_id":"themes/minos/source/images/info.svg","hash":"c8aa387e935ba9a7fa72c5dd000b7d46f2e030c4","modified":1544244418374},{"_id":"themes/minos/source/images/question.svg","hash":"7153fa2a0c21e32da6a1f96a333d8b66a178569d","modified":1544244418374},{"_id":"themes/minos/source/images/logo.png","hash":"05c809fd5222488ade0d4847d54b7b760ce1bd6e","modified":1544244418374},{"_id":"themes/minos/source/img/asuka01.png","hash":"20b7a0b20442cea0c350d7e80a0ad1b226f3fce4","modified":1544244418389},{"_id":"themes/minos/source/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1544244418374},{"_id":"themes/minos/source/img/asuka02.png","hash":"e7030dedc67f8b1d7f589c1a2663ed9c84024744","modified":1544244418390},{"_id":"themes/minos/source/img/asuka03.png","hash":"369036fc86865e5f0403e97d161c4fbd55d04c15","modified":1544244418391},{"_id":"themes/minos/source/img/asukaui1.png","hash":"46a0204121491a6ab9daf7881339462d114880f8","modified":1544244418393},{"_id":"themes/minos/source/img/countdownbutton.jpg","hash":"4869d46c6b3499b535900650759cf840b2705336","modified":1544244418393},{"_id":"themes/minos/source/img/cursor_hand.png","hash":"d93c7aeadfb95732e827b4d557cccd65a1523f10","modified":1544244418394},{"_id":"themes/minos/source/img/cursor.png","hash":"081ab7840a005a9af971d402990b40c110bb7254","modified":1544244418393},{"_id":"themes/minos/source/js/insight.js","hash":"eb23c31141784eef7300f1d1c548950e77883f56","modified":1544244418407},{"_id":"themes/minos/source/js/script.js","hash":"6b670ec4f90fb43b21a0bbd750a217af5d8aab6b","modified":1544244418408},{"_id":"themes/minos/source/img/asuka04.png","hash":"7905a5007272b069ea385a4ab1f614a3055d0cfd","modified":1544244418392},{"_id":"themes/minos/source/img/asuka05.png","hash":"c59395200e4490f31b888e0be813f71095655aa9","modified":1544244418392},{"_id":"themes/minos/source/img/default.jpg","hash":"74460c0a15a218b6b01173755061d81f8f5dff5b","modified":1544244418401},{"_id":"themes/minos/source/img/startpage.png","hash":"17929c0add7b07849caa836ccf36c417b1d7fc23","modified":1544244418405},{"_id":"themes/minos/source/img/startpage1.png","hash":"9d66484d46f7a23bd3baf2306f4e8a3b664d1d7d","modified":1544244418406},{"_id":"themes/minos/source/img/wechatapp.jpg","hash":"46a415439b0d98b0d4439af8859e4e422c043624","modified":1544244418407},{"_id":"themes/minos/source/img/slot.jpg","hash":"0a348ece1b9034774a04a4a05352dd00ed3f60f0","modified":1544244418404},{"_id":"public/post-sitemap.xml","hash":"f26a0a2dbc47692c23d081f7819f85f5c166b6b4","modified":1545469389491},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1545469389492},{"_id":"public/sitemap.xml","hash":"b9b714f9492af21ab749a9668ea50cc90e89942c","modified":1545469389550},{"_id":"public/content.json","hash":"874b9bcc0977dcd496fb694674ac58d87b576203","modified":1545469389592},{"_id":"public/2018/12/08/hello-world/index.html","hash":"ad1e678d51039e06ddc3a4f859a2a91086254778","modified":1545469389601},{"_id":"public/2018/12/04/从零开始开发小程序tutorial-part3-后台/index.html","hash":"49af5452b4ad84b27845a1cacd7c77a3ef1502ab","modified":1545469389601},{"_id":"public/2018/11/15/从零开始开发你第一个微信小程序教程tutorial-part1/index.html","hash":"9fd8fb74e62602cf00b3c551062f9b35f89c21e4","modified":1545469389602},{"_id":"public/2018/11/12/关于slot插槽/index.html","hash":"0f1886edc9894c47ef55f4f2cdb1f60c0b59def7","modified":1545469389602},{"_id":"public/2018/11/12/开发小程序准备工作/index.html","hash":"cebbfc924854b0b243db10612f708d53a0a321c7","modified":1545469389602},{"_id":"public/2018/11/01/倒计时按钮/index.html","hash":"7beaa862255bf86f35ddd48cff3073750305420a","modified":1545469389602},{"_id":"public/archives/index.html","hash":"99d0d0450c524e7ddd78fcbaa5185dd3a315e3b6","modified":1545469389602},{"_id":"public/archives/2018/index.html","hash":"a41beba83335266a6358010bf6f9aa3dc611825c","modified":1545469389602},{"_id":"public/archives/2018/11/index.html","hash":"849172e719ed9d4d4ea05f703cf3aa4acc0a9de6","modified":1545469389602},{"_id":"public/archives/2018/12/index.html","hash":"2643c45759998c043ff69d3850962c0db5c9a43b","modified":1545469389602},{"_id":"public/categories/index.html","hash":"b20b2a9aa40f05c9bbca3e5eca0fc7698b993d5e","modified":1545469389602},{"_id":"public/tags/index.html","hash":"1a102032f66792522699468816328c14b1c2e617","modified":1545469389602},{"_id":"public/2018/12/17/从零开始开发你第一个微信小程序tutorial-part4/index.html","hash":"1dfc9683cecb87ed081aed2cc8ee56cf7f5ae11c","modified":1545469389602},{"_id":"public/2018/11/23/从零开始开发你第一个微信小程序教程tutorial-part2/index.html","hash":"f13532b6b1963fbfa7808f1ddb1c0862e98caca6","modified":1545469389602},{"_id":"public/index.html","hash":"185dd6442b14173407e6b383233c26651e110f52","modified":1545469389602},{"_id":"public/images/check.svg","hash":"029b8b3523b7daa4005983b4463cd93408308aab","modified":1545469389605},{"_id":"public/images/exclamation.svg","hash":"b2db56f2cc13fce73dbea46c7b446d9bcb3bf0fd","modified":1545469389605},{"_id":"public/images/info.svg","hash":"c8aa387e935ba9a7fa72c5dd000b7d46f2e030c4","modified":1545469389605},{"_id":"public/images/question.svg","hash":"7153fa2a0c21e32da6a1f96a333d8b66a178569d","modified":1545469389606},{"_id":"public/images/logo.png","hash":"05c809fd5222488ade0d4847d54b7b760ce1bd6e","modified":1545469389606},{"_id":"public/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1545469389606},{"_id":"public/img/asuka01.png","hash":"20b7a0b20442cea0c350d7e80a0ad1b226f3fce4","modified":1545469389606},{"_id":"public/img/countdownbutton.jpg","hash":"4869d46c6b3499b535900650759cf840b2705336","modified":1545469389606},{"_id":"public/img/cursor_hand.png","hash":"d93c7aeadfb95732e827b4d557cccd65a1523f10","modified":1545469389606},{"_id":"public/img/cursor.png","hash":"081ab7840a005a9af971d402990b40c110bb7254","modified":1545469389606},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1545469389606},{"_id":"public/css/prism-okaidia.css","hash":"e6ba835f5a5b5506158830c5df7e8ff875ed12e4","modified":1545469389606},{"_id":"public/img/asuka02.png","hash":"e7030dedc67f8b1d7f589c1a2663ed9c84024744","modified":1545469389636},{"_id":"public/img/asuka03.png","hash":"369036fc86865e5f0403e97d161c4fbd55d04c15","modified":1545469389637},{"_id":"public/img/asukaui1.png","hash":"46a0204121491a6ab9daf7881339462d114880f8","modified":1545469389637},{"_id":"public/img/asuka04.png","hash":"7905a5007272b069ea385a4ab1f614a3055d0cfd","modified":1545469389638},{"_id":"public/img/default.jpg","hash":"74460c0a15a218b6b01173755061d81f8f5dff5b","modified":1545469389638},{"_id":"public/img/asuka05.png","hash":"c59395200e4490f31b888e0be813f71095655aa9","modified":1545469389638},{"_id":"public/img/startpage.png","hash":"17929c0add7b07849caa836ccf36c417b1d7fc23","modified":1545469389638},{"_id":"public/img/wechatapp.jpg","hash":"46a415439b0d98b0d4439af8859e4e422c043624","modified":1545469389638},{"_id":"public/img/startpage1.png","hash":"9d66484d46f7a23bd3baf2306f4e8a3b664d1d7d","modified":1545469389639},{"_id":"public/css/insight.css","hash":"f376dcda6bb50b708f3206c15a49f7530b3c534d","modified":1545469389654},{"_id":"public/js/script.js","hash":"6b670ec4f90fb43b21a0bbd750a217af5d8aab6b","modified":1545469389654},{"_id":"public/google48ad3f32ef9d84f8.html","hash":"60e5ca85d663bbf35cd06897b519273b0681954e","modified":1545469389654},{"_id":"public/css/style.css","hash":"91093ec3731c005bb2034934e9399c63ef4f7d32","modified":1545469389656},{"_id":"public/js/insight.js","hash":"eb23c31141784eef7300f1d1c548950e77883f56","modified":1545469389656},{"_id":"public/img/slot.jpg","hash":"0a348ece1b9034774a04a4a05352dd00ed3f60f0","modified":1545469389675}],"Category":[],"Data":[],"Page":[],"Post":[{"uuid":"0cd7e430-01e3-11e9-b145-bbedaa2ac6a6","title":"从零开始开发你第一个微信小程序tutorial-part4","date":"2018-12-17T10:03:49.000Z","_content":"\n上一期介绍了BaaS服务，使用BaaS服务可以让小程序的功能更加强大，并且降低开发难度和成本。我们这一期就来介绍一下如何通过BaaS来完成我们Asuka小程序的最后一步！\n\n我们进入[leancloud.cn][https://leancloud.cn/docs/rest_api.html]的Rest API部分。Rest API是一种常用到的通信接口，通过HTTP请求就可以获取、查询修改数据库中的内容。而我们用到leancloud中的主要功能就是Leancloud的云端数据库。在微信小程序中，微信提供了一个可以发送Http请求的API  *wx.request* 。通过leancloud的Rest API和微信的request API接口，我们可以实现对leancloud云端数据库的操作。\n\n首先我们在index.ts文件中新增一个方法：*createMessage* \n\n```javascript\n//index.js\n//获取应用实例\nimport { IMyApp } from '../../app'\n\nconst app = getApp<IMyApp>()\n\nPage({\n  data: {\n    mockMessages: ['Hello Asuka!', 'I am asuka user1', 'Who is it there?', 'I am asuka user1', 'Who is it there?', 'I am asuka user1', 'Who is it there?', 'I am asuka user1', 'Who is it there?']\n  },\n  //事件处理函数\n  bindViewTap() {\n    wx.navigateTo({\n      url: '../logs/logs'\n    })\n  },\n  onLoad() {\n  },\n\n  getUserInfo(e: any) {\n    console.log(e)\n    app.globalData.userInfo = e.detail.userInfo\n    this.setData!({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true\n    })\n  },\n    \n   // Create Message 方法，用来创建要发送的信息 \n   createMessage() {\n   \t    \n   }\n})\n\n```\n\n在*createMessage*方法中，我们需要调用微信的*wx.request* API。我们可以查看官方的[使用文档][https://developers.weixin.qq.com/miniprogram/dev/api/wx.request.html] 。\n\n```javascript\nwx.request({\n  url: 'test.php', // 仅为示例，并非真实的接口地址\n  data: {\n    x: '',\n    y: ''\n  },\n  header: {\n    'content-type': 'application/json' // 默认值\n  },\n  success(res) {\n    console.log(res.data)\n  }\n})\n```\n\n按照微信官方给出的示例代码，我们可以修改我们的*createMessage*方法。修改后的方法如下：\n\n```javascript\ncreateMessage() {\n   \t wx.request({\n      url: 'test.php', // 仅为示例，并非真实的接口地址\n      data: {\n        x: '',\n        y: ''\n      },\n      header: {\n        'content-type': 'application/json' // 默认值\n      },\n      success(res) {\n        console.log(res.data)\n      }\n    })   \n}\n```\n\n只是把代码粘贴进去还是远远不够的，我们需要对request API进行修改，比如修改url到leancloud的URL，修改data，修改header设置。如何设置我们需要参考leancloud的[RestAPI文档][https://leancloud.cn/docs/rest_api.html#hash650308615]\n\n```javascript\ncurl -X POST \\\n  -H \"X-LC-Id: xxxxxxxxxxxxx-gzGzoHsz\" \\\n  -H \"X-LC-Key: ifhd1dxxxxxxxxxx4hkQVKLU\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"content\": \"每个 Java 程序员必备的 8 个开发工具\",\"pubUser\": \"LeanCloud官方客服\",\"pubTimestamp\": 1435541999}' \\\n  https://4g800ocq.api.lncld.net/1.1/classes/Post\n```\n\n上面的示例是经常见到的使用curl发送http请求的方法，-X 后面的 POST 表示这是一个POST请求，-H代表的是Header内的配置，-d表示的是data，最后面的https就是url地址。在使用的时候，大家需要把X-LC-Id和X-LC-Key的值换成自己leancloud小程序的对应id和key。\n\n我们接着完成*createMessage*方法，结果如下：\n\n```javascript\ncreateMessage() {\n   \t wx.request({\n      url: 'https://4g800ocq.api.lncld.net/1.1/classes/Post', \n      data: {\n        message: 'This is a message test!'\n      },\n      header: {\n        'content-type': 'application/json',\n          'X-LC-Id': '4g800OCQvSQPKfJhvKowbpeI-gzGzoHsz',\n          'X-LC-Key': 'ifhd1dhKzd6WfmKH4hkQVKLU'\n      },\n      success(res) {\n        console.log(res.data)\n      }\n    })   \n}\n```\n\n然后将这个createMessage()方法和SEND按钮进行绑定，这样就可以在按SEND的时候，自动创建一条内容为'This is a message test!'的信息了，并且会存储到leanclou的云端数据库中。\n\n```html\n<!--index.wxml-->\n<view>\n  <scroll-view>\n    <view class=\"message\" wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n  <view class='footer'>\n    <input class='input' placeholder='type...'/>\n    <button class='send-button' size='mini' bindtap='createMessage'>SEND</button>\n  </view>\n</view>\n```\n\n我在测试的时候发现，若发送request请求，需要对域名进行白名单处理和备案。这是很恼火的事情，看来使用leancloud开发小程序还是任重而道远。不过基本思路就是这样，大家可以自己添加白名单继续开发！\n\n","source":"_posts/从零开始开发你第一个微信小程序tutorial-part4.md","raw":"---\nuuid: 0cd7e430-01e3-11e9-b145-bbedaa2ac6a6\ntitle: 从零开始开发你第一个微信小程序tutorial-part4\ndate: 2018-12-17 18:03:49\ntags:\n---\n\n上一期介绍了BaaS服务，使用BaaS服务可以让小程序的功能更加强大，并且降低开发难度和成本。我们这一期就来介绍一下如何通过BaaS来完成我们Asuka小程序的最后一步！\n\n我们进入[leancloud.cn][https://leancloud.cn/docs/rest_api.html]的Rest API部分。Rest API是一种常用到的通信接口，通过HTTP请求就可以获取、查询修改数据库中的内容。而我们用到leancloud中的主要功能就是Leancloud的云端数据库。在微信小程序中，微信提供了一个可以发送Http请求的API  *wx.request* 。通过leancloud的Rest API和微信的request API接口，我们可以实现对leancloud云端数据库的操作。\n\n首先我们在index.ts文件中新增一个方法：*createMessage* \n\n```javascript\n//index.js\n//获取应用实例\nimport { IMyApp } from '../../app'\n\nconst app = getApp<IMyApp>()\n\nPage({\n  data: {\n    mockMessages: ['Hello Asuka!', 'I am asuka user1', 'Who is it there?', 'I am asuka user1', 'Who is it there?', 'I am asuka user1', 'Who is it there?', 'I am asuka user1', 'Who is it there?']\n  },\n  //事件处理函数\n  bindViewTap() {\n    wx.navigateTo({\n      url: '../logs/logs'\n    })\n  },\n  onLoad() {\n  },\n\n  getUserInfo(e: any) {\n    console.log(e)\n    app.globalData.userInfo = e.detail.userInfo\n    this.setData!({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true\n    })\n  },\n    \n   // Create Message 方法，用来创建要发送的信息 \n   createMessage() {\n   \t    \n   }\n})\n\n```\n\n在*createMessage*方法中，我们需要调用微信的*wx.request* API。我们可以查看官方的[使用文档][https://developers.weixin.qq.com/miniprogram/dev/api/wx.request.html] 。\n\n```javascript\nwx.request({\n  url: 'test.php', // 仅为示例，并非真实的接口地址\n  data: {\n    x: '',\n    y: ''\n  },\n  header: {\n    'content-type': 'application/json' // 默认值\n  },\n  success(res) {\n    console.log(res.data)\n  }\n})\n```\n\n按照微信官方给出的示例代码，我们可以修改我们的*createMessage*方法。修改后的方法如下：\n\n```javascript\ncreateMessage() {\n   \t wx.request({\n      url: 'test.php', // 仅为示例，并非真实的接口地址\n      data: {\n        x: '',\n        y: ''\n      },\n      header: {\n        'content-type': 'application/json' // 默认值\n      },\n      success(res) {\n        console.log(res.data)\n      }\n    })   \n}\n```\n\n只是把代码粘贴进去还是远远不够的，我们需要对request API进行修改，比如修改url到leancloud的URL，修改data，修改header设置。如何设置我们需要参考leancloud的[RestAPI文档][https://leancloud.cn/docs/rest_api.html#hash650308615]\n\n```javascript\ncurl -X POST \\\n  -H \"X-LC-Id: xxxxxxxxxxxxx-gzGzoHsz\" \\\n  -H \"X-LC-Key: ifhd1dxxxxxxxxxx4hkQVKLU\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"content\": \"每个 Java 程序员必备的 8 个开发工具\",\"pubUser\": \"LeanCloud官方客服\",\"pubTimestamp\": 1435541999}' \\\n  https://4g800ocq.api.lncld.net/1.1/classes/Post\n```\n\n上面的示例是经常见到的使用curl发送http请求的方法，-X 后面的 POST 表示这是一个POST请求，-H代表的是Header内的配置，-d表示的是data，最后面的https就是url地址。在使用的时候，大家需要把X-LC-Id和X-LC-Key的值换成自己leancloud小程序的对应id和key。\n\n我们接着完成*createMessage*方法，结果如下：\n\n```javascript\ncreateMessage() {\n   \t wx.request({\n      url: 'https://4g800ocq.api.lncld.net/1.1/classes/Post', \n      data: {\n        message: 'This is a message test!'\n      },\n      header: {\n        'content-type': 'application/json',\n          'X-LC-Id': '4g800OCQvSQPKfJhvKowbpeI-gzGzoHsz',\n          'X-LC-Key': 'ifhd1dhKzd6WfmKH4hkQVKLU'\n      },\n      success(res) {\n        console.log(res.data)\n      }\n    })   \n}\n```\n\n然后将这个createMessage()方法和SEND按钮进行绑定，这样就可以在按SEND的时候，自动创建一条内容为'This is a message test!'的信息了，并且会存储到leanclou的云端数据库中。\n\n```html\n<!--index.wxml-->\n<view>\n  <scroll-view>\n    <view class=\"message\" wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n  <view class='footer'>\n    <input class='input' placeholder='type...'/>\n    <button class='send-button' size='mini' bindtap='createMessage'>SEND</button>\n  </view>\n</view>\n```\n\n我在测试的时候发现，若发送request请求，需要对域名进行白名单处理和备案。这是很恼火的事情，看来使用leancloud开发小程序还是任重而道远。不过基本思路就是这样，大家可以自己添加白名单继续开发！\n\n","slug":"从零开始开发你第一个微信小程序tutorial-part4","published":1,"updated":"2018-12-17T11:05:16.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpz8kka300008tk97ve3k0lq","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">上一期介绍了BaaS服务，使用BaaS服务可以让小程序的功能更加强大，并且降低开发难度和成本。我们这一期就来介绍一下如何通过BaaS来完成我们Asuka小程序的最后一步！<p></p>\n<p>我们进入[leancloud.cn][<a href=\"https://leancloud.cn/docs/rest_api.html]的Rest\" target=\"_blank\" rel=\"noopener\">https://leancloud.cn/docs/rest_api.html]的Rest</a> API部分。Rest API是一种常用到的通信接口，通过HTTP请求就可以获取、查询修改数据库中的内容。而我们用到leancloud中的主要功能就是Leancloud的云端数据库。在微信小程序中，微信提供了一个可以发送Http请求的API  <em>wx.request</em> 。通过leancloud的Rest API和微信的request API接口，我们可以实现对leancloud云端数据库的操作。</p>\n<p>首先我们在index.ts文件中新增一个方法：<em>createMessage</em> </p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//index.js</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//获取应用实例</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; IMyApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../app'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = getApp&lt;IMyApp&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mockMessages: [<span class=\"hljs-string\">'Hello Asuka!'</span>, <span class=\"hljs-string\">'I am asuka user1'</span>, <span class=\"hljs-string\">'Who is it there?'</span>, <span class=\"hljs-string\">'I am asuka user1'</span>, <span class=\"hljs-string\">'Who is it there?'</span>, <span class=\"hljs-string\">'I am asuka user1'</span>, <span class=\"hljs-string\">'Who is it there?'</span>, <span class=\"hljs-string\">'I am asuka user1'</span>, <span class=\"hljs-string\">'Who is it there?'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"hljs-comment\">//事件处理函数</span></span><br><span class=\"line\">  bindViewTap() &#123;</span><br><span class=\"line\">    wx.navigateTo(&#123;</span><br><span class=\"line\">      url: <span class=\"hljs-string\">'../logs/logs'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad() &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getUserInfo(e: any) &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(e)</span><br><span class=\"line\">    app.globalData.userInfo = e.detail.userInfo</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">      userInfo: e.detail.userInfo,</span><br><span class=\"line\">      hasUserInfo: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"hljs-comment\">// Create Message 方法，用来创建要发送的信息 </span></span><br><span class=\"line\">   createMessage() &#123;</span><br><span class=\"line\">   \t    </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在<em>createMessage</em>方法中，我们需要调用微信的<em>wx.request</em> API。我们可以查看官方的[使用文档][<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wx.request.html]\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/miniprogram/dev/api/wx.request.html]</a> 。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.request(&#123;</span><br><span class=\"line\">  url: <span class=\"hljs-string\">'test.php'</span>, <span class=\"hljs-comment\">// 仅为示例，并非真实的接口地址</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    x: <span class=\"hljs-string\">''</span>,</span><br><span class=\"line\">    y: <span class=\"hljs-string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  header: &#123;</span><br><span class=\"line\">    <span class=\"hljs-string\">'content-type'</span>: <span class=\"hljs-string\">'application/json'</span> <span class=\"hljs-comment\">// 默认值</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  success(res) &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(res.data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>按照微信官方给出的示例代码，我们可以修改我们的<em>createMessage</em>方法。修改后的方法如下：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createMessage() &#123;</span><br><span class=\"line\">   \t wx.request(&#123;</span><br><span class=\"line\">      url: <span class=\"hljs-string\">'test.php'</span>, <span class=\"hljs-comment\">// 仅为示例，并非真实的接口地址</span></span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        x: <span class=\"hljs-string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"hljs-string\">''</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      header: &#123;</span><br><span class=\"line\">        <span class=\"hljs-string\">'content-type'</span>: <span class=\"hljs-string\">'application/json'</span> <span class=\"hljs-comment\">// 默认值</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.log(res.data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只是把代码粘贴进去还是远远不够的，我们需要对request API进行修改，比如修改url到leancloud的URL，修改data，修改header设置。如何设置我们需要参考leancloud的[RestAPI文档][<a href=\"https://leancloud.cn/docs/rest_api.html#hash650308615]\" target=\"_blank\" rel=\"noopener\">https://leancloud.cn/docs/rest_api.html#hash650308615]</a></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  -H <span class=\"hljs-string\">\"X-LC-Id: xxxxxxxxxxxxx-gzGzoHsz\"</span> \\</span><br><span class=\"line\">  -H <span class=\"hljs-string\">\"X-LC-Key: ifhd1dxxxxxxxxxx4hkQVKLU\"</span> \\</span><br><span class=\"line\">  -H <span class=\"hljs-string\">\"Content-Type: application/json\"</span> \\</span><br><span class=\"line\">  -d <span class=\"hljs-string\">'&#123;\"content\": \"每个 Java 程序员必备的 8 个开发工具\",\"pubUser\": \"LeanCloud官方客服\",\"pubTimestamp\": 1435541999&#125;'</span> \\</span><br><span class=\"line\">  https:<span class=\"hljs-comment\">//4g800ocq.api.lncld.net/1.1/classes/Post</span></span><br></pre></td></tr></table></figure>\n<p>上面的示例是经常见到的使用curl发送http请求的方法，-X 后面的 POST 表示这是一个POST请求，-H代表的是Header内的配置，-d表示的是data，最后面的https就是url地址。在使用的时候，大家需要把X-LC-Id和X-LC-Key的值换成自己leancloud小程序的对应id和key。</p>\n<p>我们接着完成<em>createMessage</em>方法，结果如下：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createMessage() &#123;</span><br><span class=\"line\">   \t wx.request(&#123;</span><br><span class=\"line\">      url: <span class=\"hljs-string\">'https://4g800ocq.api.lncld.net/1.1/classes/Post'</span>, </span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        message: <span class=\"hljs-string\">'This is a message test!'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      header: &#123;</span><br><span class=\"line\">        <span class=\"hljs-string\">'content-type'</span>: <span class=\"hljs-string\">'application/json'</span>,</span><br><span class=\"line\">          <span class=\"hljs-string\">'X-LC-Id'</span>: <span class=\"hljs-string\">'4g800OCQvSQPKfJhvKowbpeI-gzGzoHsz'</span>,</span><br><span class=\"line\">          <span class=\"hljs-string\">'X-LC-Key'</span>: <span class=\"hljs-string\">'ifhd1dhKzd6WfmKH4hkQVKLU'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.log(res.data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将这个createMessage()方法和SEND按钮进行绑定，这样就可以在按SEND的时候，自动创建一条内容为’This is a message test!’的信息了，并且会存储到leanclou的云端数据库中。</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"hljs-attr\">wx:for-item</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'footer'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'input'</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'type...'</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'send-button'</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">'mini'</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">'createMessage'</span>&gt;</span>SEND<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我在测试的时候发现，若发送request请求，需要对域名进行白名单处理和备案。这是很恼火的事情，看来使用leancloud开发小程序还是任重而道远。不过基本思路就是这样，大家可以自己添加白名单继续开发！</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"上一期介绍了BaaS服务，使用BaaS服务可以让小程序的功能更加强大，并且降低开发难度和成本。我们这一期就来介绍一下如何通过BaaS来完成我们Asuka小程序的最后一步！\n\n我们进入[leancloud.cn][https://leancloud.cn/docs/rest_api.html]的Rest API部分。Rest API是一种常用到的通信接口，通过HTTP请求就可以获取、查询修改数据库中的内容。而我们用到leancloud中的主要功能就是Leancloud的云端数据库。在微信小程序中，微信提供了一个可以发送Http请求的API wx.request 。通过leancloud的Rest","more":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">上一期介绍了BaaS服务，使用BaaS服务可以让小程序的功能更加强大，并且降低开发难度和成本。我们这一期就来介绍一下如何通过BaaS来完成我们Asuka小程序的最后一步！<p></p>\n<p>我们进入[leancloud.cn][<a href=\"https://leancloud.cn/docs/rest_api.html]的Rest\" target=\"_blank\" rel=\"noopener\">https://leancloud.cn/docs/rest_api.html]的Rest</a> API部分。Rest API是一种常用到的通信接口，通过HTTP请求就可以获取、查询修改数据库中的内容。而我们用到leancloud中的主要功能就是Leancloud的云端数据库。在微信小程序中，微信提供了一个可以发送Http请求的API  <em>wx.request</em> 。通过leancloud的Rest API和微信的request API接口，我们可以实现对leancloud云端数据库的操作。</p>\n<p>首先我们在index.ts文件中新增一个方法：<em>createMessage</em> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"comment\">//获取应用实例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; IMyApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../app'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = getApp&lt;IMyApp&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mockMessages: [<span class=\"string\">'Hello Asuka!'</span>, <span class=\"string\">'I am asuka user1'</span>, <span class=\"string\">'Who is it there?'</span>, <span class=\"string\">'I am asuka user1'</span>, <span class=\"string\">'Who is it there?'</span>, <span class=\"string\">'I am asuka user1'</span>, <span class=\"string\">'Who is it there?'</span>, <span class=\"string\">'I am asuka user1'</span>, <span class=\"string\">'Who is it there?'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//事件处理函数</span></span><br><span class=\"line\">  bindViewTap() &#123;</span><br><span class=\"line\">    wx.navigateTo(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'../logs/logs'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad() &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getUserInfo(e: any) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">    app.globalData.userInfo = e.detail.userInfo</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">      userInfo: e.detail.userInfo,</span><br><span class=\"line\">      hasUserInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"comment\">// Create Message 方法，用来创建要发送的信息 </span></span><br><span class=\"line\">   createMessage() &#123;</span><br><span class=\"line\">   \t    </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在<em>createMessage</em>方法中，我们需要调用微信的<em>wx.request</em> API。我们可以查看官方的[使用文档][<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wx.request.html]\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/miniprogram/dev/api/wx.request.html]</a> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.request(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">// 仅为示例，并非真实的接口地址</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    x: <span class=\"string\">''</span>,</span><br><span class=\"line\">    y: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  header: &#123;</span><br><span class=\"line\">    <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span> <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  success(res) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>按照微信官方给出的示例代码，我们可以修改我们的<em>createMessage</em>方法。修改后的方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createMessage() &#123;</span><br><span class=\"line\">   \t wx.request(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">// 仅为示例，并非真实的接口地址</span></span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        x: <span class=\"string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      header: &#123;</span><br><span class=\"line\">        <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span> <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只是把代码粘贴进去还是远远不够的，我们需要对request API进行修改，比如修改url到leancloud的URL，修改data，修改header设置。如何设置我们需要参考leancloud的[RestAPI文档][<a href=\"https://leancloud.cn/docs/rest_api.html#hash650308615]\" target=\"_blank\" rel=\"noopener\">https://leancloud.cn/docs/rest_api.html#hash650308615]</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  -H <span class=\"string\">\"X-LC-Id: xxxxxxxxxxxxx-gzGzoHsz\"</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">\"X-LC-Key: ifhd1dxxxxxxxxxx4hkQVKLU\"</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">\"Content-Type: application/json\"</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">'&#123;\"content\": \"每个 Java 程序员必备的 8 个开发工具\",\"pubUser\": \"LeanCloud官方客服\",\"pubTimestamp\": 1435541999&#125;'</span> \\</span><br><span class=\"line\">  https:<span class=\"comment\">//4g800ocq.api.lncld.net/1.1/classes/Post</span></span><br></pre></td></tr></table></figure>\n<p>上面的示例是经常见到的使用curl发送http请求的方法，-X 后面的 POST 表示这是一个POST请求，-H代表的是Header内的配置，-d表示的是data，最后面的https就是url地址。在使用的时候，大家需要把X-LC-Id和X-LC-Key的值换成自己leancloud小程序的对应id和key。</p>\n<p>我们接着完成<em>createMessage</em>方法，结果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createMessage() &#123;</span><br><span class=\"line\">   \t wx.request(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'https://4g800ocq.api.lncld.net/1.1/classes/Post'</span>, </span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">'This is a message test!'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      header: &#123;</span><br><span class=\"line\">        <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">          <span class=\"string\">'X-LC-Id'</span>: <span class=\"string\">'4g800OCQvSQPKfJhvKowbpeI-gzGzoHsz'</span>,</span><br><span class=\"line\">          <span class=\"string\">'X-LC-Key'</span>: <span class=\"string\">'ifhd1dhKzd6WfmKH4hkQVKLU'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将这个createMessage()方法和SEND按钮进行绑定，这样就可以在按SEND的时候，自动创建一条内容为’This is a message test!’的信息了，并且会存储到leanclou的云端数据库中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"attr\">wx:for-item</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'footer'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">'input'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">'type...'</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">'send-button'</span> <span class=\"attr\">size</span>=<span class=\"string\">'mini'</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">'createMessage'</span>&gt;</span>SEND<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我在测试的时候发现，若发送request请求，需要对域名进行白名单处理和备案。这是很恼火的事情，看来使用leancloud开发小程序还是任重而道远。不过基本思路就是这样，大家可以自己添加白名单继续开发！</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>"},{"uuid":"ee3dda50-de49-11e8-b21e-7bfb8e621fb6","title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\nuuid: ee3dda50-de49-11e8-b21e-7bfb8e621fb6\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-12-08T04:46:58.514Z","updated":"2018-12-08T04:46:58.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpz8kka800018tk9r2aocwkx","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<p></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"hljs-string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n\nQuick Start\nCreate a new post\n1\n\n\n$ hexo new \"My New Post\"\n\n\nMore info: Writing\n\nRun server\n1\n\n\n$ hexo s","more":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<p></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>"},{"uuid":"6a819c10-e88a-11e8-b8dd-7f4713d006c9","title":"从零开始开发你第一个微信小程序教程tutorial-part1","date":"2018-11-15T03:56:22.000Z","featured_image":"/img/startpage.png","_content":"\n如果编程只是局限于做一些按钮小组件，那么也太过单调和无聊了。在我刚开始学习编程的时候，最重要的驱动力是想写出自己的iOS App。拥有自己的App感觉是一件非常酷的事情。今天我们就以此为切入点，来逐步完成一个微信小程序。\n\n___\n\n* 首先要想为自己的小程序取一个喜欢的名字。\n* 其次要想好这个小程序有什么功能。\n* 最后我们来实现它。\n\n\n\n我要做这样的一个小程序，它的名字叫Asuka。这个小程序的功能很简单，就是让用户可以畅所欲言。所以我需要在Asuka上面创建一个留言板，用户可以发布自己想要说的话。说干就干，我们先来做一个产品的原型设计。\n\n产品的原型设计工作有很多，专门为iOS使用的Sketch，在线的如同墨刀等等，不过我还是偏爱adobe旗下的XD。Adobe XD从公测起我就开始使用了，并且现在是全免费的。它上手非常简单方便，而且界面设计上非常极简，对于做Flat UI design来说，是绝对完美的原型设计工具。\n\n[Adobe XD 下载](https://www.adobe.com/hk_en/products/xd.html)\n\n#### UI\n\nAsuka 原型设计第一版UI如图：\n\n![asukaui1](/img/asukaui1.png)\n\n这是一个最精简的产品原型。从零开始做产品，一定要从少向多不断的延伸。第一版的产品只有两个功能：\n\n1. 用户可以查看其它用户的留言\n2. 用户可以创建自己的留言\n\n因此，我们需要三个核心组件：\n\n1. 用户留言列表\n2. 用户创建留言输入框\n3. 发送按钮\n\n\n\n#### 小程序开发工具\n\n接下来我们打开小程序开发工具来创建一个小程序Project\n\n[小程序开发工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18111420)\n\n大家可以按照自己的系统下载对应的小程序开发工具。\n\n然后创建我们第一个小程序。\n\n\n\n![startpage](/img/startpage.png)\n\n选择紫色的Mini Program Project\n\n\n\n![startpage1](/img/startpage1.png)\n\n1. 在Directory选择一个你需要存放Project的目录。\n2. 在Name那里创建小程序的名字，我们用Asuka。\n3. 在AppId下面的两行灰色字，第二行Or use a test account mini Program/Mini Game那里，点击Mini Program，会为小程序创建一个临时的AppId\n4. 点击OK后，Asuka的启动项目就创建完成了。\n\n\n\n\n\n","source":"_posts/从零开始开发你第一个微信小程序教程tutorial-part1.md","raw":"---\nuuid: 6a819c10-e88a-11e8-b8dd-7f4713d006c9\ntitle: 从零开始开发你第一个微信小程序教程tutorial-part1\ndate: 2018-11-15 11:56:22\ntags:\nfeatured_image: /img/startpage.png\n---\n\n如果编程只是局限于做一些按钮小组件，那么也太过单调和无聊了。在我刚开始学习编程的时候，最重要的驱动力是想写出自己的iOS App。拥有自己的App感觉是一件非常酷的事情。今天我们就以此为切入点，来逐步完成一个微信小程序。\n\n___\n\n* 首先要想为自己的小程序取一个喜欢的名字。\n* 其次要想好这个小程序有什么功能。\n* 最后我们来实现它。\n\n\n\n我要做这样的一个小程序，它的名字叫Asuka。这个小程序的功能很简单，就是让用户可以畅所欲言。所以我需要在Asuka上面创建一个留言板，用户可以发布自己想要说的话。说干就干，我们先来做一个产品的原型设计。\n\n产品的原型设计工作有很多，专门为iOS使用的Sketch，在线的如同墨刀等等，不过我还是偏爱adobe旗下的XD。Adobe XD从公测起我就开始使用了，并且现在是全免费的。它上手非常简单方便，而且界面设计上非常极简，对于做Flat UI design来说，是绝对完美的原型设计工具。\n\n[Adobe XD 下载](https://www.adobe.com/hk_en/products/xd.html)\n\n#### UI\n\nAsuka 原型设计第一版UI如图：\n\n![asukaui1](/img/asukaui1.png)\n\n这是一个最精简的产品原型。从零开始做产品，一定要从少向多不断的延伸。第一版的产品只有两个功能：\n\n1. 用户可以查看其它用户的留言\n2. 用户可以创建自己的留言\n\n因此，我们需要三个核心组件：\n\n1. 用户留言列表\n2. 用户创建留言输入框\n3. 发送按钮\n\n\n\n#### 小程序开发工具\n\n接下来我们打开小程序开发工具来创建一个小程序Project\n\n[小程序开发工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18111420)\n\n大家可以按照自己的系统下载对应的小程序开发工具。\n\n然后创建我们第一个小程序。\n\n\n\n![startpage](/img/startpage.png)\n\n选择紫色的Mini Program Project\n\n\n\n![startpage1](/img/startpage1.png)\n\n1. 在Directory选择一个你需要存放Project的目录。\n2. 在Name那里创建小程序的名字，我们用Asuka。\n3. 在AppId下面的两行灰色字，第二行Or use a test account mini Program/Mini Game那里，点击Mini Program，会为小程序创建一个临时的AppId\n4. 点击OK后，Asuka的启动项目就创建完成了。\n\n\n\n\n\n","slug":"从零开始开发你第一个微信小程序教程tutorial-part1","published":1,"updated":"2018-12-17T11:05:18.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpz8kkaa00028tk9zuas3tf5","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">如果编程只是局限于做一些按钮小组件，那么也太过单调和无聊了。在我刚开始学习编程的时候，最重要的驱动力是想写出自己的iOS App。拥有自己的App感觉是一件非常酷的事情。今天我们就以此为切入点，来逐步完成一个微信小程序。<p></p>\n<hr>\n<ul>\n<li>首先要想为自己的小程序取一个喜欢的名字。</li>\n<li>其次要想好这个小程序有什么功能。</li>\n<li>最后我们来实现它。</li>\n</ul>\n<p>我要做这样的一个小程序，它的名字叫Asuka。这个小程序的功能很简单，就是让用户可以畅所欲言。所以我需要在Asuka上面创建一个留言板，用户可以发布自己想要说的话。说干就干，我们先来做一个产品的原型设计。</p>\n<p>产品的原型设计工作有很多，专门为iOS使用的Sketch，在线的如同墨刀等等，不过我还是偏爱adobe旗下的XD。Adobe XD从公测起我就开始使用了，并且现在是全免费的。它上手非常简单方便，而且界面设计上非常极简，对于做Flat UI design来说，是绝对完美的原型设计工具。</p>\n<p><a href=\"https://www.adobe.com/hk_en/products/xd.html\" target=\"_blank\" rel=\"noopener\">Adobe XD 下载</a></p>\n<h4 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h4><p>Asuka 原型设计第一版UI如图：</p>\n<p><a href=\"/img/asukaui1.png\" title=\"asukaui1\" class=\"gallery-item\"><img src=\"/img/asukaui1.png\" alt=\"asukaui1\"></a></p>\n<p>这是一个最精简的产品原型。从零开始做产品，一定要从少向多不断的延伸。第一版的产品只有两个功能：</p>\n<ol>\n<li>用户可以查看其它用户的留言</li>\n<li>用户可以创建自己的留言</li>\n</ol>\n<p>因此，我们需要三个核心组件：</p>\n<ol>\n<li>用户留言列表</li>\n<li>用户创建留言输入框</li>\n<li>发送按钮</li>\n</ol>\n<h4 id=\"小程序开发工具\"><a href=\"#小程序开发工具\" class=\"headerlink\" title=\"小程序开发工具\"></a>小程序开发工具</h4><p>接下来我们打开小程序开发工具来创建一个小程序Project</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18111420\" target=\"_blank\" rel=\"noopener\">小程序开发工具</a></p>\n<p>大家可以按照自己的系统下载对应的小程序开发工具。</p>\n<p>然后创建我们第一个小程序。</p>\n<p><a href=\"/img/startpage.png\" title=\"startpage\" class=\"gallery-item\"><img src=\"/img/startpage.png\" alt=\"startpage\"></a></p>\n<p>选择紫色的Mini Program Project</p>\n<p><a href=\"/img/startpage1.png\" title=\"startpage1\" class=\"gallery-item\"><img src=\"/img/startpage1.png\" alt=\"startpage1\"></a></p>\n<ol>\n<li>在Directory选择一个你需要存放Project的目录。</li>\n<li>在Name那里创建小程序的名字，我们用Asuka。</li>\n<li>在AppId下面的两行灰色字，第二行Or use a test account mini Program/Mini Game那里，点击Mini Program，会为小程序创建一个临时的AppId</li>\n<li>点击OK后，Asuka的启动项目就创建完成了。</li>\n</ol>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"如果编程只是局限于做一些按钮小组件，那么也太过单调和无聊了。在我刚开始学习编程的时候，最重要的驱动力是想写出自己的iOS App。拥有自己的App感觉是一件非常酷的事情。今天我们就以此为切入点，来逐步完成一个微信小程序。\n\n\n\n\n * 首先要想为自己的小程序取一个喜欢的名字。\n * 其次要想好这个小程序有什么功能。\n * 最后我们来实现它。\n\n我要做这样的一个小程序，它的名字叫Asuka。这个小程序的功能很简单，就是让用户可以畅所欲言。所以我需要在Asuka上面创建一个留言板，用户可以发布自己想要说的话。说干就干，我们先来做一个产品的原型设计。\n\n产品的原型设计工作有很多，专门为iOS使用的S","more":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">如果编程只是局限于做一些按钮小组件，那么也太过单调和无聊了。在我刚开始学习编程的时候，最重要的驱动力是想写出自己的iOS App。拥有自己的App感觉是一件非常酷的事情。今天我们就以此为切入点，来逐步完成一个微信小程序。<p></p>\n<hr>\n<ul>\n<li>首先要想为自己的小程序取一个喜欢的名字。</li>\n<li>其次要想好这个小程序有什么功能。</li>\n<li>最后我们来实现它。</li>\n</ul>\n<p>我要做这样的一个小程序，它的名字叫Asuka。这个小程序的功能很简单，就是让用户可以畅所欲言。所以我需要在Asuka上面创建一个留言板，用户可以发布自己想要说的话。说干就干，我们先来做一个产品的原型设计。</p>\n<p>产品的原型设计工作有很多，专门为iOS使用的Sketch，在线的如同墨刀等等，不过我还是偏爱adobe旗下的XD。Adobe XD从公测起我就开始使用了，并且现在是全免费的。它上手非常简单方便，而且界面设计上非常极简，对于做Flat UI design来说，是绝对完美的原型设计工具。</p>\n<p><a href=\"https://www.adobe.com/hk_en/products/xd.html\" target=\"_blank\" rel=\"noopener\">Adobe XD 下载</a></p>\n<h4 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h4><p>Asuka 原型设计第一版UI如图：</p>\n<p><a href=\"/img/asukaui1.png\" title=\"asukaui1\" class=\"gallery-item\"><img src=\"/img/asukaui1.png\" alt=\"asukaui1\"></a></p>\n<p>这是一个最精简的产品原型。从零开始做产品，一定要从少向多不断的延伸。第一版的产品只有两个功能：</p>\n<ol>\n<li>用户可以查看其它用户的留言</li>\n<li>用户可以创建自己的留言</li>\n</ol>\n<p>因此，我们需要三个核心组件：</p>\n<ol>\n<li>用户留言列表</li>\n<li>用户创建留言输入框</li>\n<li>发送按钮</li>\n</ol>\n<h4 id=\"小程序开发工具\"><a href=\"#小程序开发工具\" class=\"headerlink\" title=\"小程序开发工具\"></a>小程序开发工具</h4><p>接下来我们打开小程序开发工具来创建一个小程序Project</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18111420\" target=\"_blank\" rel=\"noopener\">小程序开发工具</a></p>\n<p>大家可以按照自己的系统下载对应的小程序开发工具。</p>\n<p>然后创建我们第一个小程序。</p>\n<p><a href=\"/img/startpage.png\" title=\"startpage\" class=\"gallery-item\"><img src=\"/img/startpage.png\" alt=\"startpage\"></a></p>\n<p>选择紫色的Mini Program Project</p>\n<p><a href=\"/img/startpage1.png\" title=\"startpage1\" class=\"gallery-item\"><img src=\"/img/startpage1.png\" alt=\"startpage1\"></a></p>\n<ol>\n<li>在Directory选择一个你需要存放Project的目录。</li>\n<li>在Name那里创建小程序的名字，我们用Asuka。</li>\n<li>在AppId下面的两行灰色字，第二行Or use a test account mini Program/Mini Game那里，点击Mini Program，会为小程序创建一个临时的AppId</li>\n<li>点击OK后，Asuka的启动项目就创建完成了。</li>\n</ol>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>"},{"uuid":"b683f7c0-f726-11e8-9464-a169c1b16ab6","title":"从零开始开发小程序tutorial part3-后台","date":"2018-12-03T18:10:27.000Z","_content":"\n我们要开发的Asuka小程序，用户可以发布状态到公共留言板，这些状态想让每个人都看到，我们就必须要有个公共存储这些状态的地方，这个地方我们称之为后台（backend-server）。\n\n一般来说，前端（frontend）指用户直接可以看到和使用的软件，在Asuka这个小程序项目中，前端就是我们开发的用户界面。它主要用来展示内容和创作内容，而这些内容有需要发送到服务器，而这个接收和保存数据的服务器，我们称之为后端（backend）。一般来说，前端和后端是相辅相成互相协作的，这样才能提供更好的基于互联网的服务。一般后端服务器的搭建，需要有很多其它的专业知识要学习，比如学习Nodejs的expressjs框架来创建，使用java来搭建，使用python，ruby等来创建服务器。而且还涉及到服务器的申请和部署，对于初学者来说，一下子掌握如此多的内容是很困难的很耗时的事情。\n\n但是在互联网高度发达的时代，充满了各种各样的可能。今天我为大家推荐一种流行了数年的服务，他就是BaaS服务。BaaS服务全称是Backend As A Service，顾名思义就是把后端建设当作一种服务来提供。所有后端需要的东西，BaaS提供商会帮用户解决，这样初学者就可以不用担心后端搭建所带来的学习成本，可以很快的上手制作好自己的小程序。\n\n有很多服务提供商都提供BaaS服务，这里我介绍两家我用的比较多的，最重要的是免费的BaaS服务提供商：[LeanCloud](www.leancloud.cn) 和 [Bmob](www.bmob.cn) 。这两家的任何一家都足以满足我们的需求，大家可以提前注册一个账号，开始我们Asuka小程序最后阶段的学习！\n\n","source":"_posts/从零开始开发小程序tutorial-part3-后台.md","raw":"---\nuuid: b683f7c0-f726-11e8-9464-a169c1b16ab6\ntitle: 从零开始开发小程序tutorial part3-后台\ndate: 2018-12-04 02:10:27\ntags:\n---\n\n我们要开发的Asuka小程序，用户可以发布状态到公共留言板，这些状态想让每个人都看到，我们就必须要有个公共存储这些状态的地方，这个地方我们称之为后台（backend-server）。\n\n一般来说，前端（frontend）指用户直接可以看到和使用的软件，在Asuka这个小程序项目中，前端就是我们开发的用户界面。它主要用来展示内容和创作内容，而这些内容有需要发送到服务器，而这个接收和保存数据的服务器，我们称之为后端（backend）。一般来说，前端和后端是相辅相成互相协作的，这样才能提供更好的基于互联网的服务。一般后端服务器的搭建，需要有很多其它的专业知识要学习，比如学习Nodejs的expressjs框架来创建，使用java来搭建，使用python，ruby等来创建服务器。而且还涉及到服务器的申请和部署，对于初学者来说，一下子掌握如此多的内容是很困难的很耗时的事情。\n\n但是在互联网高度发达的时代，充满了各种各样的可能。今天我为大家推荐一种流行了数年的服务，他就是BaaS服务。BaaS服务全称是Backend As A Service，顾名思义就是把后端建设当作一种服务来提供。所有后端需要的东西，BaaS提供商会帮用户解决，这样初学者就可以不用担心后端搭建所带来的学习成本，可以很快的上手制作好自己的小程序。\n\n有很多服务提供商都提供BaaS服务，这里我介绍两家我用的比较多的，最重要的是免费的BaaS服务提供商：[LeanCloud](www.leancloud.cn) 和 [Bmob](www.bmob.cn) 。这两家的任何一家都足以满足我们的需求，大家可以提前注册一个账号，开始我们Asuka小程序最后阶段的学习！\n\n","slug":"从零开始开发小程序tutorial-part3-后台","published":1,"updated":"2018-12-17T11:05:22.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpz8kkab00038tk9uc34acuo","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">我们要开发的Asuka小程序，用户可以发布状态到公共留言板，这些状态想让每个人都看到，我们就必须要有个公共存储这些状态的地方，这个地方我们称之为后台（backend-server）。<p></p>\n<p>一般来说，前端（frontend）指用户直接可以看到和使用的软件，在Asuka这个小程序项目中，前端就是我们开发的用户界面。它主要用来展示内容和创作内容，而这些内容有需要发送到服务器，而这个接收和保存数据的服务器，我们称之为后端（backend）。一般来说，前端和后端是相辅相成互相协作的，这样才能提供更好的基于互联网的服务。一般后端服务器的搭建，需要有很多其它的专业知识要学习，比如学习Nodejs的expressjs框架来创建，使用java来搭建，使用python，ruby等来创建服务器。而且还涉及到服务器的申请和部署，对于初学者来说，一下子掌握如此多的内容是很困难的很耗时的事情。</p>\n<p>但是在互联网高度发达的时代，充满了各种各样的可能。今天我为大家推荐一种流行了数年的服务，他就是BaaS服务。BaaS服务全称是Backend As A Service，顾名思义就是把后端建设当作一种服务来提供。所有后端需要的东西，BaaS提供商会帮用户解决，这样初学者就可以不用担心后端搭建所带来的学习成本，可以很快的上手制作好自己的小程序。</p>\n<p>有很多服务提供商都提供BaaS服务，这里我介绍两家我用的比较多的，最重要的是免费的BaaS服务提供商：<a href=\"www.leancloud.cn\">LeanCloud</a> 和 <a href=\"www.bmob.cn\">Bmob</a> 。这两家的任何一家都足以满足我们的需求，大家可以提前注册一个账号，开始我们Asuka小程序最后阶段的学习！</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"我们要开发的Asuka小程序，用户可以发布状态到公共留言板，这些状态想让每个人都看到，我们就必须要有个公共存储这些状态的地方，这个地方我们称之为后台（backend-server）。\n\n一般来说，前端（frontend）指用户直接可以看到和使用的软件，在Asuka这个小程序项目中，前端就是我们开发的用户界面。它主要用来展示内容和创作内容，而这些内容有需要发送到服务器，而这个接收和保存数据的服务器，我们称之为后端（backend）。一般来说，前端和后端是相辅相成互相协作的，这样才能提供更好的基于互联网的服务。一般后端服务器的搭建，需要有很多其它的专业知识要学习，比如学习Nodejs的expres","more":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">我们要开发的Asuka小程序，用户可以发布状态到公共留言板，这些状态想让每个人都看到，我们就必须要有个公共存储这些状态的地方，这个地方我们称之为后台（backend-server）。<p></p>\n<p>一般来说，前端（frontend）指用户直接可以看到和使用的软件，在Asuka这个小程序项目中，前端就是我们开发的用户界面。它主要用来展示内容和创作内容，而这些内容有需要发送到服务器，而这个接收和保存数据的服务器，我们称之为后端（backend）。一般来说，前端和后端是相辅相成互相协作的，这样才能提供更好的基于互联网的服务。一般后端服务器的搭建，需要有很多其它的专业知识要学习，比如学习Nodejs的expressjs框架来创建，使用java来搭建，使用python，ruby等来创建服务器。而且还涉及到服务器的申请和部署，对于初学者来说，一下子掌握如此多的内容是很困难的很耗时的事情。</p>\n<p>但是在互联网高度发达的时代，充满了各种各样的可能。今天我为大家推荐一种流行了数年的服务，他就是BaaS服务。BaaS服务全称是Backend As A Service，顾名思义就是把后端建设当作一种服务来提供。所有后端需要的东西，BaaS提供商会帮用户解决，这样初学者就可以不用担心后端搭建所带来的学习成本，可以很快的上手制作好自己的小程序。</p>\n<p>有很多服务提供商都提供BaaS服务，这里我介绍两家我用的比较多的，最重要的是免费的BaaS服务提供商：<a href=\"www.leancloud.cn\">LeanCloud</a> 和 <a href=\"www.bmob.cn\">Bmob</a> 。这两家的任何一家都足以满足我们的需求，大家可以提前注册一个账号，开始我们Asuka小程序最后阶段的学习！</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>"},{"uuid":"9e788430-de48-11e8-98ff-33eb863de5d7","title":"微信小程序倒计时按钮","date":"2018-11-01T15:58:22.000Z","featured_image":"/img/countdownbutton.jpg","_content":"\n日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。\n\n\n\n#### CountdownButton 基础代码\n\n\n```html\n\t<button class='countdown-btn' bindtap='sendCode' disabled='{{isCounting}}'>\n   \t\t<text hidden='{{isCounting}}'>{{text}}</text> \n   \t\t<text hidden='{{!isCounting}}'>{{countdownText}}</text>\n\t</button>\t\n\n```\n\n上面的代码有几个变量的绑定，bindtap绑定了一个sendCode方法，disabled绑定了isCounting变量。isCounting主要用来指示CountdownButton的状态。剩余两个变量text和countdownText分别用来展示按钮在不同状态时所显示的内容。\n\n#### Step 1\n\n第一步需要将上面的基础代码放入到 .wxml文件中想要显示的位置。\n\n#### Step 2\n\n第二步打开.js文件，在data域中声明上面需要绑定的几个变量：isCounting, text, countdownText。\n除了这三个变量，我们还增加了一个countdownDuration的值，这个值用来设定倒计时时长，此处我们默认设置了10秒钟。\n\n\n```javascript\n\t//index.js\n\tconst app = getApp()\n\n\tPage({\n\t  data: {\n\t    ...\n\t    isCounting: false,\n\t    countdownText: '0s',\n\t    text: '获取验证码',\n\t    countdownDuration: 10,\n\t    ...\n\n\t  },\n\n\t  ...\n\t})\n```\n\n#### Step 3\n\n第三步我们需要实现sendCode的逻辑代码。在sendCode方法中，首先我们使用了Date.now()获取了点击按钮那一时刻的时间，并且存在了start变量中（这里的时间是milliseconds）。我们希望这个倒计时按钮可以每一秒钟都更新倒计时状态，为了达成这个目标，我们使用了setInterval方法。setInterval方法需要传入一个function和一个每次重复的时间间隔（单位是milliseconds）。这里我们把重复的时间间隔设定为1000 milliseconds，也就是1秒。\n\n在传入的方法内部，我们首先要做的是获取当前时刻的时间，然后与start做差获得时间差（单位milliseconds），简单的数学运算后我们可以得到流逝的时间。Math.round方法主要用来将float数变成整数。在if逻辑判断中，当流逝的时间差小于我们初始设定的间隔时间（countdownDuration: 10）时，我们更新isCounting状态为true，并且对应的更新countdownText的值。直到时间差超过了10秒，我们将isCounting状态设置回false，表明按钮恢复到可点击状态。\n\nclearInterval方法是对setInterval进行终止的操作。\n\n\n```javascript\n\n\t//index.js\n\tconst app = getApp()\n\n\tPage({\n\t  data: {\n\t  \t...\n\t    \n\t    isCounting: false,\n\t    countdownText: '0s',\n\t    text: '获取验证码',\n\t    countdownDuration: 10,\n\n\t    ...\n\t  },\n\n\t  sendCode: function(){\n\t    console.log('code sent');\n\n\t    var start = Date.now();\n\n\t    let globalThis = this;\n\t    var repeat = setInterval(function () { \n\t      var now = Date.now();\n\t      var seconds = Math.round((now - start)/1000);\n\n\t      console.log(seconds);\n\n\t      if (seconds < globalThis.data.countdownDuration) {\n\t        globalThis.setData({\n\t          isCounting: true,\n\t          countdownText: `${globalThis.data.countdownDuration - seconds} s`,\n\t        });\n\t      }else {\n\t        globalThis.setData({\n\t          isCounting: false,\n\t          countdownText: `10 s`\n\t        })\n\t        clearInterval(repeat);\n\t      }\n\n\t    }, 1000);\n\t  }\n\t})\n\n```\n\n\n代码中的 let globalThis = this 需要理解。在setInterval中的function代码，其实已经创建了一个新的子域，this只能调用这个子域中的变量。因此我们需要在进入子域前，将最外层域的this存到globalThis中，如此操作才可以获取到data中对应的变量和方法。\n\n\n到此，一个倒计时按钮就做好了！\n\n[下载千鸟 | 你的AR创作空间！](https://www.haoqigood.com)\n\n\n\n\n\n","source":"_posts/倒计时按钮.md","raw":"---\nuuid: 9e788430-de48-11e8-98ff-33eb863de5d7\ntitle: 微信小程序倒计时按钮\ndate: 2018-11-01 23:58:22\ntags:\nfeatured_image: /img/countdownbutton.jpg\n---\n\n日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。\n\n\n\n#### CountdownButton 基础代码\n\n\n```html\n\t<button class='countdown-btn' bindtap='sendCode' disabled='{{isCounting}}'>\n   \t\t<text hidden='{{isCounting}}'>{{text}}</text> \n   \t\t<text hidden='{{!isCounting}}'>{{countdownText}}</text>\n\t</button>\t\n\n```\n\n上面的代码有几个变量的绑定，bindtap绑定了一个sendCode方法，disabled绑定了isCounting变量。isCounting主要用来指示CountdownButton的状态。剩余两个变量text和countdownText分别用来展示按钮在不同状态时所显示的内容。\n\n#### Step 1\n\n第一步需要将上面的基础代码放入到 .wxml文件中想要显示的位置。\n\n#### Step 2\n\n第二步打开.js文件，在data域中声明上面需要绑定的几个变量：isCounting, text, countdownText。\n除了这三个变量，我们还增加了一个countdownDuration的值，这个值用来设定倒计时时长，此处我们默认设置了10秒钟。\n\n\n```javascript\n\t//index.js\n\tconst app = getApp()\n\n\tPage({\n\t  data: {\n\t    ...\n\t    isCounting: false,\n\t    countdownText: '0s',\n\t    text: '获取验证码',\n\t    countdownDuration: 10,\n\t    ...\n\n\t  },\n\n\t  ...\n\t})\n```\n\n#### Step 3\n\n第三步我们需要实现sendCode的逻辑代码。在sendCode方法中，首先我们使用了Date.now()获取了点击按钮那一时刻的时间，并且存在了start变量中（这里的时间是milliseconds）。我们希望这个倒计时按钮可以每一秒钟都更新倒计时状态，为了达成这个目标，我们使用了setInterval方法。setInterval方法需要传入一个function和一个每次重复的时间间隔（单位是milliseconds）。这里我们把重复的时间间隔设定为1000 milliseconds，也就是1秒。\n\n在传入的方法内部，我们首先要做的是获取当前时刻的时间，然后与start做差获得时间差（单位milliseconds），简单的数学运算后我们可以得到流逝的时间。Math.round方法主要用来将float数变成整数。在if逻辑判断中，当流逝的时间差小于我们初始设定的间隔时间（countdownDuration: 10）时，我们更新isCounting状态为true，并且对应的更新countdownText的值。直到时间差超过了10秒，我们将isCounting状态设置回false，表明按钮恢复到可点击状态。\n\nclearInterval方法是对setInterval进行终止的操作。\n\n\n```javascript\n\n\t//index.js\n\tconst app = getApp()\n\n\tPage({\n\t  data: {\n\t  \t...\n\t    \n\t    isCounting: false,\n\t    countdownText: '0s',\n\t    text: '获取验证码',\n\t    countdownDuration: 10,\n\n\t    ...\n\t  },\n\n\t  sendCode: function(){\n\t    console.log('code sent');\n\n\t    var start = Date.now();\n\n\t    let globalThis = this;\n\t    var repeat = setInterval(function () { \n\t      var now = Date.now();\n\t      var seconds = Math.round((now - start)/1000);\n\n\t      console.log(seconds);\n\n\t      if (seconds < globalThis.data.countdownDuration) {\n\t        globalThis.setData({\n\t          isCounting: true,\n\t          countdownText: `${globalThis.data.countdownDuration - seconds} s`,\n\t        });\n\t      }else {\n\t        globalThis.setData({\n\t          isCounting: false,\n\t          countdownText: `10 s`\n\t        })\n\t        clearInterval(repeat);\n\t      }\n\n\t    }, 1000);\n\t  }\n\t})\n\n```\n\n\n代码中的 let globalThis = this 需要理解。在setInterval中的function代码，其实已经创建了一个新的子域，this只能调用这个子域中的变量。因此我们需要在进入子域前，将最外层域的this存到globalThis中，如此操作才可以获取到data中对应的变量和方法。\n\n\n到此，一个倒计时按钮就做好了！\n\n[下载千鸟 | 你的AR创作空间！](https://www.haoqigood.com)\n\n\n\n\n\n","slug":"倒计时按钮","published":1,"updated":"2018-12-22T09:00:26.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpz8kkac00048tk9q29svx5i","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。<p></p>\n<h4 id=\"CountdownButton-基础代码\"><a href=\"#CountdownButton-基础代码\" class=\"headerlink\" title=\"CountdownButton 基础代码\"></a>CountdownButton 基础代码</h4><figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'countdown-btn'</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">'sendCode'</span> <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">'&#123;&#123;isCounting&#125;&#125;'</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span> <span class=\"hljs-attr\">hidden</span>=<span class=\"hljs-string\">'&#123;&#123;isCounting&#125;&#125;'</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span> </span><br><span class=\"line\">  \t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span> <span class=\"hljs-attr\">hidden</span>=<span class=\"hljs-string\">'&#123;&#123;!isCounting&#125;&#125;'</span>&gt;</span>&#123;&#123;countdownText&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码有几个变量的绑定，bindtap绑定了一个sendCode方法，disabled绑定了isCounting变量。isCounting主要用来指示CountdownButton的状态。剩余两个变量text和countdownText分别用来展示按钮在不同状态时所显示的内容。</p>\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h4><p>第一步需要将上面的基础代码放入到 .wxml文件中想要显示的位置。</p>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h4><p>第二步打开.js文件，在data域中声明上面需要绑定的几个变量：isCounting, text, countdownText。<br>除了这三个变量，我们还增加了一个countdownDuration的值，这个值用来设定倒计时时长，此处我们默认设置了10秒钟。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//index.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = getApp()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    isCounting: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">    countdownText: <span class=\"hljs-string\">'0s'</span>,</span><br><span class=\"line\">    text: <span class=\"hljs-string\">'获取验证码'</span>,</span><br><span class=\"line\">    countdownDuration: <span class=\"hljs-number\">10</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h4><p>第三步我们需要实现sendCode的逻辑代码。在sendCode方法中，首先我们使用了Date.now()获取了点击按钮那一时刻的时间，并且存在了start变量中（这里的时间是milliseconds）。我们希望这个倒计时按钮可以每一秒钟都更新倒计时状态，为了达成这个目标，我们使用了setInterval方法。setInterval方法需要传入一个function和一个每次重复的时间间隔（单位是milliseconds）。这里我们把重复的时间间隔设定为1000 milliseconds，也就是1秒。</p>\n<p>在传入的方法内部，我们首先要做的是获取当前时刻的时间，然后与start做差获得时间差（单位milliseconds），简单的数学运算后我们可以得到流逝的时间。Math.round方法主要用来将float数变成整数。在if逻辑判断中，当流逝的时间差小于我们初始设定的间隔时间（countdownDuration: 10）时，我们更新isCounting状态为true，并且对应的更新countdownText的值。直到时间差超过了10秒，我们将isCounting状态设置回false，表明按钮恢复到可点击状态。</p>\n<p>clearInterval方法是对setInterval进行终止的操作。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">//index.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = getApp()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">    </span><br><span class=\"line\">    isCounting: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">    countdownText: <span class=\"hljs-string\">'0s'</span>,</span><br><span class=\"line\">    text: <span class=\"hljs-string\">'获取验证码'</span>,</span><br><span class=\"line\">    countdownDuration: <span class=\"hljs-number\">10</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  sendCode: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'code sent'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> start = <span class=\"hljs-built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> globalThis = <span class=\"hljs-keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> repeat = setInterval(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; </span><br><span class=\"line\">      <span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-built_in\">Date</span>.now();</span><br><span class=\"line\">      <span class=\"hljs-keyword\">var</span> seconds = <span class=\"hljs-built_in\">Math</span>.round((now - start)/<span class=\"hljs-number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(seconds);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (seconds &lt; globalThis.data.countdownDuration) &#123;</span><br><span class=\"line\">        globalThis.setData(&#123;</span><br><span class=\"line\">          isCounting: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">          countdownText: <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;globalThis.data.countdownDuration - seconds&#125;</span> s`</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;<span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">        globalThis.setData(&#123;</span><br><span class=\"line\">          isCounting: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">          countdownText: <span class=\"hljs-string\">`10 s`</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        clearInterval(repeat);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"hljs-number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>代码中的 let globalThis = this 需要理解。在setInterval中的function代码，其实已经创建了一个新的子域，this只能调用这个子域中的变量。因此我们需要在进入子域前，将最外层域的this存到globalThis中，如此操作才可以获取到data中对应的变量和方法。</p>\n<p>到此，一个倒计时按钮就做好了！</p>\n<p><a href=\"https://www.haoqigood.com\" target=\"_blank\" rel=\"noopener\">下载千鸟 | 你的AR创作空间！</a></p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。\n\nCountdownButton 基础代码\n1\n2\n3\n4\n\n\n<button class=\"countdown-btn\" bindtap=\"sendCode\" disabled=\"{{isCounting}}\">\n  \t\t<text hidden=\"{{isCounting}}\">{{text}}</text> \n  \t\t<text hidden=\"{{!isCounting}}\">{{countdownText}}</text>\n</button>","more":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">日常的小程序使用中，经常会有发送短信验证码的按钮，这个按钮有倒计时的属性，在倒计时期间，按钮是不可点击的状态。这种按钮非常实用，那么我们就来开发一个这样的按钮。<p></p>\n<h4 id=\"CountdownButton-基础代码\"><a href=\"#CountdownButton-基础代码\" class=\"headerlink\" title=\"CountdownButton 基础代码\"></a>CountdownButton 基础代码</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">'countdown-btn'</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">'sendCode'</span> <span class=\"attr\">disabled</span>=<span class=\"string\">'&#123;&#123;isCounting&#125;&#125;'</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">hidden</span>=<span class=\"string\">'&#123;&#123;isCounting&#125;&#125;'</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span> </span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">hidden</span>=<span class=\"string\">'&#123;&#123;!isCounting&#125;&#125;'</span>&gt;</span>&#123;&#123;countdownText&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码有几个变量的绑定，bindtap绑定了一个sendCode方法，disabled绑定了isCounting变量。isCounting主要用来指示CountdownButton的状态。剩余两个变量text和countdownText分别用来展示按钮在不同状态时所显示的内容。</p>\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h4><p>第一步需要将上面的基础代码放入到 .wxml文件中想要显示的位置。</p>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h4><p>第二步打开.js文件，在data域中声明上面需要绑定的几个变量：isCounting, text, countdownText。<br>除了这三个变量，我们还增加了一个countdownDuration的值，这个值用来设定倒计时时长，此处我们默认设置了10秒钟。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = getApp()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    isCounting: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    countdownText: <span class=\"string\">'0s'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'获取验证码'</span>,</span><br><span class=\"line\">    countdownDuration: <span class=\"number\">10</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h4><p>第三步我们需要实现sendCode的逻辑代码。在sendCode方法中，首先我们使用了Date.now()获取了点击按钮那一时刻的时间，并且存在了start变量中（这里的时间是milliseconds）。我们希望这个倒计时按钮可以每一秒钟都更新倒计时状态，为了达成这个目标，我们使用了setInterval方法。setInterval方法需要传入一个function和一个每次重复的时间间隔（单位是milliseconds）。这里我们把重复的时间间隔设定为1000 milliseconds，也就是1秒。</p>\n<p>在传入的方法内部，我们首先要做的是获取当前时刻的时间，然后与start做差获得时间差（单位milliseconds），简单的数学运算后我们可以得到流逝的时间。Math.round方法主要用来将float数变成整数。在if逻辑判断中，当流逝的时间差小于我们初始设定的间隔时间（countdownDuration: 10）时，我们更新isCounting状态为true，并且对应的更新countdownText的值。直到时间差超过了10秒，我们将isCounting状态设置回false，表明按钮恢复到可点击状态。</p>\n<p>clearInterval方法是对setInterval进行终止的操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = getApp()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">    </span><br><span class=\"line\">    isCounting: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    countdownText: <span class=\"string\">'0s'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'获取验证码'</span>,</span><br><span class=\"line\">    countdownDuration: <span class=\"number\">10</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  sendCode: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'code sent'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> globalThis = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> repeat = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> seconds = <span class=\"built_in\">Math</span>.round((now - start)/<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(seconds);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (seconds &lt; globalThis.data.countdownDuration) &#123;</span><br><span class=\"line\">        globalThis.setData(&#123;</span><br><span class=\"line\">          isCounting: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          countdownText: <span class=\"string\">`<span class=\"subst\">$&#123;globalThis.data.countdownDuration - seconds&#125;</span> s`</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        globalThis.setData(&#123;</span><br><span class=\"line\">          isCounting: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          countdownText: <span class=\"string\">`10 s`</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        clearInterval(repeat);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>代码中的 let globalThis = this 需要理解。在setInterval中的function代码，其实已经创建了一个新的子域，this只能调用这个子域中的变量。因此我们需要在进入子域前，将最外层域的this存到globalThis中，如此操作才可以获取到data中对应的变量和方法。</p>\n<p>到此，一个倒计时按钮就做好了！</p>\n<p><a href=\"https://www.haoqigood.com\" target=\"_blank\" rel=\"noopener\">下载千鸟 | 你的AR创作空间！</a></p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>"},{"uuid":"f216eca0-e5da-11e8-8bcd-fddcf839c3de","title":"关于slot插槽","date":"2018-11-11T17:55:16.000Z","featured_image":"/img/slot.jpg","_content":"\n\n### 关于Slot插槽\n\n\n\n笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。\n\n\n\nw3c中是这样定义slot的：\n\n------\n\nDefinitions\n\nThese are the new definitions. For all other definitions, consult current [spec](http://w3c.github.io/webcomponents/spec/shadow/).\n\n- **slot** -- a defined location in a shadow tree. Represented by the `slot` element.\n- **slot name** -- the name of a **slot**.\n- **default slot** -- a **slot** for assigning nodes without a **slot name**.\n\n------\n\n意思是说，slot在语法树中定义了一个影位，这个影位用slot标签展示。\n\n初学HTML的朋友可能不太常见到slot标签，大多数看到的是div, h1,  img等最常用的标签，但事实上在使用div标签的时候，就已经运用了类似slot功能。因为一个div标签在定义的时候就在内部增加了slot插槽，这使得我们可以在div内部放其它的标签。\n\n\n\n举例：\n\n我们定义一个自己的component（组件）\n\n```html\n<template id=\"cool-component\">\n    <p> Here is all my cool stuff</p>\n</template>\n```\n\n上面我们使用template标签定义了一个最简单的component，名字叫cool-component。\n\n这个component只有一个功能，就是展示我们想要展示的话。初学web编程的朋友可能会问：我们为什么要如此复杂的为了一句话来写这么长的代码？这样的疑问提出的完全正确！因为为了一句话写一个component就是画蛇添足。不过这里只是举例子，因为component使用的场景，应该是更复杂的地方。比如在为大的企业开发网站时，由于多个页面会展示相同的企业信息或别的可以复用的内容，如果每次去写，就太麻烦了。这时候我们会定义一个component，来提高开发效率。所以用component的场景是component内容需要多次被复用，并且可以封装的情况下，我们去定义它。团队协作中，使用component也可以大大提升开发的效率。\n\n\n\n当我们在代码中引用cool-component标签时：\n\n```html\n<div>\n\t<cool-component/>\n</div>\n```\n\n对应翻译到网页上的代码是：\n\n```html\n<div>\n\t<p> Here is all my cool stuff</p>\n</div>\n```\n\n\n\n但是只显示cool-component标签内已经定义好的static文字，似乎有点单调。该怎么修改呢？\n\n我们对cool-component做一点点调整，这里我们会用到slot标签。\n\n```html\n<template id=\"cool-component\">\n\t<slot></slot>\n</template>\n```\n\n\n\n可以看到我们将原有的p标签替换成了slot标签。那么有什么用呢？\n\n我们来看看现在如何使用新构造的cool-component:\n\n\n\n在cool-component中添加一个按钮：\n\n```html\n<div>\n    <cool-component>\n        <button>Super cool button</button>\n    </cool-component>\n</div>\n```\n\n\n\n在cool-component中加一段文字：\n\n```html\n<div>\n    <cool-component>\n        <p>You are awesome!</p>\n    </cool-component>\n</div>\n```\n\n\n\n你还可以在cool-component中增加各种你想要的内容。\n\n所以，slot为自定义component提供了功能的拓展，使得component的使用可以更加变化多端，功能强大。","source":"_posts/关于slot插槽.md","raw":"---\nuuid: f216eca0-e5da-11e8-8bcd-fddcf839c3de\ntitle: 关于slot插槽\ndate: 2018-11-12 01:55:16\ntags:\nfeatured_image: /img/slot.jpg\n\n---\n\n\n### 关于Slot插槽\n\n\n\n笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。\n\n\n\nw3c中是这样定义slot的：\n\n------\n\nDefinitions\n\nThese are the new definitions. For all other definitions, consult current [spec](http://w3c.github.io/webcomponents/spec/shadow/).\n\n- **slot** -- a defined location in a shadow tree. Represented by the `slot` element.\n- **slot name** -- the name of a **slot**.\n- **default slot** -- a **slot** for assigning nodes without a **slot name**.\n\n------\n\n意思是说，slot在语法树中定义了一个影位，这个影位用slot标签展示。\n\n初学HTML的朋友可能不太常见到slot标签，大多数看到的是div, h1,  img等最常用的标签，但事实上在使用div标签的时候，就已经运用了类似slot功能。因为一个div标签在定义的时候就在内部增加了slot插槽，这使得我们可以在div内部放其它的标签。\n\n\n\n举例：\n\n我们定义一个自己的component（组件）\n\n```html\n<template id=\"cool-component\">\n    <p> Here is all my cool stuff</p>\n</template>\n```\n\n上面我们使用template标签定义了一个最简单的component，名字叫cool-component。\n\n这个component只有一个功能，就是展示我们想要展示的话。初学web编程的朋友可能会问：我们为什么要如此复杂的为了一句话来写这么长的代码？这样的疑问提出的完全正确！因为为了一句话写一个component就是画蛇添足。不过这里只是举例子，因为component使用的场景，应该是更复杂的地方。比如在为大的企业开发网站时，由于多个页面会展示相同的企业信息或别的可以复用的内容，如果每次去写，就太麻烦了。这时候我们会定义一个component，来提高开发效率。所以用component的场景是component内容需要多次被复用，并且可以封装的情况下，我们去定义它。团队协作中，使用component也可以大大提升开发的效率。\n\n\n\n当我们在代码中引用cool-component标签时：\n\n```html\n<div>\n\t<cool-component/>\n</div>\n```\n\n对应翻译到网页上的代码是：\n\n```html\n<div>\n\t<p> Here is all my cool stuff</p>\n</div>\n```\n\n\n\n但是只显示cool-component标签内已经定义好的static文字，似乎有点单调。该怎么修改呢？\n\n我们对cool-component做一点点调整，这里我们会用到slot标签。\n\n```html\n<template id=\"cool-component\">\n\t<slot></slot>\n</template>\n```\n\n\n\n可以看到我们将原有的p标签替换成了slot标签。那么有什么用呢？\n\n我们来看看现在如何使用新构造的cool-component:\n\n\n\n在cool-component中添加一个按钮：\n\n```html\n<div>\n    <cool-component>\n        <button>Super cool button</button>\n    </cool-component>\n</div>\n```\n\n\n\n在cool-component中加一段文字：\n\n```html\n<div>\n    <cool-component>\n        <p>You are awesome!</p>\n    </cool-component>\n</div>\n```\n\n\n\n你还可以在cool-component中增加各种你想要的内容。\n\n所以，slot为自定义component提供了功能的拓展，使得component的使用可以更加变化多端，功能强大。","slug":"关于slot插槽","published":1,"updated":"2018-12-17T11:05:54.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpz8kkad00058tk99xrwnjn6","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <h3=\"\" id=\"关于Slot插槽\"><a href=\"#关于Slot插槽\" class=\"headerlink\" title=\"关于Slot插槽\"></a>关于Slot插槽<p>笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。</p>\n<p>w3c中是这样定义slot的：</p>\n<hr>\n<p>Definitions</p>\n<p>These are the new definitions. For all other definitions, consult current <a href=\"http://w3c.github.io/webcomponents/spec/shadow/\" target=\"_blank\" rel=\"noopener\">spec</a>.</p>\n<ul>\n<li><strong>slot</strong> – a defined location in a shadow tree. Represented by the <code>slot</code> element.</li>\n<li><strong>slot name</strong> – the name of a <strong>slot</strong>.</li>\n<li><strong>default slot</strong> – a <strong>slot</strong> for assigning nodes without a <strong>slot name</strong>.</li>\n</ul>\n<hr>\n<p>意思是说，slot在语法树中定义了一个影位，这个影位用slot标签展示。</p>\n<p>初学HTML的朋友可能不太常见到slot标签，大多数看到的是div, h1,  img等最常用的标签，但事实上在使用div标签的时候，就已经运用了类似slot功能。因为一个div标签在定义的时候就在内部增加了slot插槽，这使得我们可以在div内部放其它的标签。</p>\n<p>举例：</p>\n<p>我们定义一个自己的component（组件）</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cool-component\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> Here is all my cool stuff<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面我们使用template标签定义了一个最简单的component，名字叫cool-component。</p>\n<p>这个component只有一个功能，就是展示我们想要展示的话。初学web编程的朋友可能会问：我们为什么要如此复杂的为了一句话来写这么长的代码？这样的疑问提出的完全正确！因为为了一句话写一个component就是画蛇添足。不过这里只是举例子，因为component使用的场景，应该是更复杂的地方。比如在为大的企业开发网站时，由于多个页面会展示相同的企业信息或别的可以复用的内容，如果每次去写，就太麻烦了。这时候我们会定义一个component，来提高开发效率。所以用component的场景是component内容需要多次被复用，并且可以封装的情况下，我们去定义它。团队协作中，使用component也可以大大提升开发的效率。</p>\n<p>当我们在代码中引用cool-component标签时：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">true<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cool-component</span>/&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对应翻译到网页上的代码是：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">true<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> Here is all my cool stuff<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是只显示cool-component标签内已经定义好的static文字，似乎有点单调。该怎么修改呢？</p>\n<p>我们对cool-component做一点点调整，这里我们会用到slot标签。</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cool-component\"</span>&gt;</span></span><br><span class=\"line\">true<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到我们将原有的p标签替换成了slot标签。那么有什么用呢？</p>\n<p>我们来看看现在如何使用新构造的cool-component:</p>\n<p>在cool-component中添加一个按钮：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cool-component</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Super cool button<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cool-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在cool-component中加一段文字：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cool-component</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>You are awesome!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cool-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>你还可以在cool-component中增加各种你想要的内容。</p>\n<p>所以，slot为自定义component提供了功能的拓展，使得component的使用可以更加变化多端，功能强大。</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"关于Slot插槽笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。\n\nw3c中是这样定义slot的：\n\n\n\n\nDefinitions\n\nThese are the new definitions. For all other definitions, consult current spec.\n\n * slot – a defined location in a shadow tree. Represented by the slot element.\n * slot name – the name ","more":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <h3=\"\" id=\"关于Slot插槽\"><a href=\"#关于Slot插槽\" class=\"headerlink\" title=\"关于Slot插槽\"></a>关于Slot插槽<p>笔者过去做的前端开发主要是iOS app的开发，对于slot插槽是很陌生的。但使用中发现在vuejs开发时，slot插槽是一个非常有魔力的东西。</p>\n<p>w3c中是这样定义slot的：</p>\n<hr>\n<p>Definitions</p>\n<p>These are the new definitions. For all other definitions, consult current <a href=\"http://w3c.github.io/webcomponents/spec/shadow/\" target=\"_blank\" rel=\"noopener\">spec</a>.</p>\n<ul>\n<li><strong>slot</strong> – a defined location in a shadow tree. Represented by the <code>slot</code> element.</li>\n<li><strong>slot name</strong> – the name of a <strong>slot</strong>.</li>\n<li><strong>default slot</strong> – a <strong>slot</strong> for assigning nodes without a <strong>slot name</strong>.</li>\n</ul>\n<hr>\n<p>意思是说，slot在语法树中定义了一个影位，这个影位用slot标签展示。</p>\n<p>初学HTML的朋友可能不太常见到slot标签，大多数看到的是div, h1,  img等最常用的标签，但事实上在使用div标签的时候，就已经运用了类似slot功能。因为一个div标签在定义的时候就在内部增加了slot插槽，这使得我们可以在div内部放其它的标签。</p>\n<p>举例：</p>\n<p>我们定义一个自己的component（组件）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cool-component\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Here is all my cool stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面我们使用template标签定义了一个最简单的component，名字叫cool-component。</p>\n<p>这个component只有一个功能，就是展示我们想要展示的话。初学web编程的朋友可能会问：我们为什么要如此复杂的为了一句话来写这么长的代码？这样的疑问提出的完全正确！因为为了一句话写一个component就是画蛇添足。不过这里只是举例子，因为component使用的场景，应该是更复杂的地方。比如在为大的企业开发网站时，由于多个页面会展示相同的企业信息或别的可以复用的内容，如果每次去写，就太麻烦了。这时候我们会定义一个component，来提高开发效率。所以用component的场景是component内容需要多次被复用，并且可以封装的情况下，我们去定义它。团队协作中，使用component也可以大大提升开发的效率。</p>\n<p>当我们在代码中引用cool-component标签时：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">cool-component</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对应翻译到网页上的代码是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Here is all my cool stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是只显示cool-component标签内已经定义好的static文字，似乎有点单调。该怎么修改呢？</p>\n<p>我们对cool-component做一点点调整，这里我们会用到slot标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cool-component\"</span>&gt;</span></span><br><span class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到我们将原有的p标签替换成了slot标签。那么有什么用呢？</p>\n<p>我们来看看现在如何使用新构造的cool-component:</p>\n<p>在cool-component中添加一个按钮：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cool-component</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Super cool button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">cool-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在cool-component中加一段文字：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cool-component</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You are awesome!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">cool-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>你还可以在cool-component中增加各种你想要的内容。</p>\n<p>所以，slot为自定义component提供了功能的拓展，使得component的使用可以更加变化多端，功能强大。</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>"},{"uuid":"7e0ee750-e5d9-11e8-b292-9d2d6db634c5","title":"开发小程序准备工作","date":"2018-11-11T17:44:52.000Z","featured_image":"/img/wechatapp.jpg","_content":"![WeChat App](/img/wechatapp.jpg)\n\n[官方教程](https://developers.weixin.qq.com/miniprogram/dev/)\n\n\n\n#### Step 1 | 申请开发者账号\n\n为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。\n\n\n\n#### Step 2 | 下载开发工具\n\n[小程序开发工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18110616)\n\n在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。\n\n\n\n#### Step 3 | 开始开发\n\n打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。","source":"_posts/开发小程序准备工作.md","raw":"---\nuuid: 7e0ee750-e5d9-11e8-b292-9d2d6db634c5\ntitle: 开发小程序准备工作\ndate: 2018-11-12 01:44:52\ntags:\nfeatured_image: /img/wechatapp.jpg\n---\n![WeChat App](/img/wechatapp.jpg)\n\n[官方教程](https://developers.weixin.qq.com/miniprogram/dev/)\n\n\n\n#### Step 1 | 申请开发者账号\n\n为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。\n\n\n\n#### Step 2 | 下载开发工具\n\n[小程序开发工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18110616)\n\n在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。\n\n\n\n#### Step 3 | 开始开发\n\n打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。","slug":"开发小程序准备工作","published":1,"updated":"2018-12-17T11:05:42.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpz8kkaf00068tk9v1qh1m82","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\"><a href=\"/img/wechatapp.jpg\" title=\"WeChat App\" class=\"gallery-item\"><img src=\"/img/wechatapp.jpg\" alt=\"WeChat App\"></a><p></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h4 id=\"Step-1-申请开发者账号\"><a href=\"#Step-1-申请开发者账号\" class=\"headerlink\" title=\"Step 1 | 申请开发者账号\"></a>Step 1 | 申请开发者账号</h4><p>为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。</p>\n<h4 id=\"Step-2-下载开发工具\"><a href=\"#Step-2-下载开发工具\" class=\"headerlink\" title=\"Step 2 | 下载开发工具\"></a>Step 2 | 下载开发工具</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18110616\" target=\"_blank\" rel=\"noopener\">小程序开发工具</a></p>\n<p>在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。</p>\n<h4 id=\"Step-3-开始开发\"><a href=\"#Step-3-开始开发\" class=\"headerlink\" title=\"Step 3 | 开始开发\"></a>Step 3 | 开始开发</h4><p>打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"官方教程\n\nStep 1 | 申请开发者账号\n为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。\n\nStep 2 | 下载开发工具\n小程序开发工具\n\n在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。\n\nStep 3 | 开始开发\n打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。","more":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\"><a href=\"/img/wechatapp.jpg\" title=\"WeChat App\" class=\"gallery-item\"><img src=\"/img/wechatapp.jpg\" alt=\"WeChat App\"></a><p></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h4 id=\"Step-1-申请开发者账号\"><a href=\"#Step-1-申请开发者账号\" class=\"headerlink\" title=\"Step 1 | 申请开发者账号\"></a>Step 1 | 申请开发者账号</h4><p>为了更好的管理自己的小程序，以及未来的小程序发布，最好的方式是先创建一个自己的开发者账号。大家可以按照官方提供的文档，申请和注册自己的小程序开发账号。</p>\n<h4 id=\"Step-2-下载开发工具\"><a href=\"#Step-2-下载开发工具\" class=\"headerlink\" title=\"Step 2 | 下载开发工具\"></a>Step 2 | 下载开发工具</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18110616\" target=\"_blank\" rel=\"noopener\">小程序开发工具</a></p>\n<p>在申请开发者账号后，需要下载小程序的开发者工具。大家根据自己使用的电脑系统下载对应的版本。笔者使用的是Mac，所以下载Mac OS版本。</p>\n<h4 id=\"Step-3-开始开发\"><a href=\"#Step-3-开始开发\" class=\"headerlink\" title=\"Step 3 | 开始开发\"></a>Step 3 | 开始开发</h4><p>打开开发者工具，创建QuickStart项目，我们就可以开始开发小程序了。</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>"},{"uuid":"24203300-eec8-11e8-9ab0-e176216747e5","title":"从零开始开发你第一个微信小程序教程tutorial-part2","date":"2018-11-23T02:33:20.000Z","featured_image":"/img/asuka05.png","_content":"\n在上一篇中，我们已经创建了一个微信小程序工程，这一篇，我们将开始开发微信小程序Asuka。\n\n在创建工程的时候，我选择了使用TypeScript语法的工程。TypeScript相对于JavaScript来说，多了类型描述，并且TypeScript完全支持JavaScript语法，所以不必担心。\n\n首先，大家可以在Utils目录下，找到app.json文件，并且打开它。\n\n```javascript\n{\n  \"pages\":[\n    \"pages/index/index\",\n    \"pages/logs/logs\"\n  ],\n  \"window\":{\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarBackgroundColor\": \"#fff\",\n    \"navigationBarTitleText\": \"WeChat\",\n    \"navigationBarTextStyle\":\"black\"\n  }\n}\n```\n\n\n\napp.json文件是整个小程序的配置文件，这里有小程序一些基本设置。其中pages项描述了小程序内包含的页面，之类我们看到包含了两个页面，一个是index，一个是logs，这两个页面我们可以在pages目录中找到。由于index页面放在了第一位，所以这个就是小程序打开时所展示的页面。\n\n然后我们进入index.wxml页面，打开后可以看到如下代码。\n\n```html\n<!--index.wxml-->\n<view class=\"container\">\n  <view class=\"userinfo\">\n    <button wx:if=\"{{!hasUserInfo && canIUse}}\" open-type=\"getUserInfo\" bindgetuserinfo=\"getUserInfo\"> 获取头像昵称 </button>\n    <block wx:else>\n      <image bindtap=\"bindViewTap\" class=\"userinfo-avatar\" src=\"{{userInfo.avatarUrl}}\" mode=\"cover\"></image>\n      <text class=\"userinfo-nickname\">{{userInfo.nickName}}</text>\n    </block>\n  </view>\n  <view class=\"usermotto\">\n    <text class=\"user-motto\">{{motto}}</text>\n  </view>\n</view>\n```\n\n\n\n这是微信小程序创建的模版代码，现在我们就来修改它，来构建我们Asuka小程序的UI布局。\n\n我们将代码的2-12行全部删除。结果如下：\n\n```html\n<!--index.wxml-->\n<view class=\"container\">\n \n    \n    \n    \n    \n    \n    \n    \n    \n    \n</view>\n```\n\n\n\n![asukaui1](/img/asukaui1.png)\n\n根据我们的UI，Asuka可以分成两个部分，上部的留言列表，下部的内容编辑区域和发送按钮。\n\n由于现在我们还没有数据库，所以我们先做一些mock data（mock data是用来快速实现功能而创建的假数据）。\n\n现在打开index.ts文件（如果在创建时没有选择TypeScript工程，那可以打开index.js文件），内容如下：\n\n```javascript\n//index.js\n//获取应用实例\nimport { IMyApp } from '../../app'\n\nconst app = getApp<IMyApp>()\n\nPage({\n  data: {\n    motto: '点击 “编译” 以构建',\n    userInfo: {},\n    hasUserInfo: false,\n    canIUse: wx.canIUse('button.open-type.getUserInfo'),\n  },\n  //事件处理函数\n  bindViewTap() {\n    wx.navigateTo({\n      url: '../logs/logs'\n    })\n  },\n  onLoad() {\n    if (app.globalData.userInfo) {\n      this.setData!({\n        userInfo: app.globalData.userInfo,\n        hasUserInfo: true,\n      })\n    } else if (this.data.canIUse){\n      // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回\n      // 所以此处加入 callback 以防止这种情况\n      app.userInfoReadyCallback = (res) => {\n        this.setData!({\n          userInfo: res,\n          hasUserInfo: true\n        })\n      }\n    } else {\n      // 在没有 open-type=getUserInfo 版本的兼容处理\n      wx.getUserInfo({\n        success: res => {\n          app.globalData.userInfo = res.userInfo\n          this.setData!({\n            userInfo: res.userInfo,\n            hasUserInfo: true\n          })\n        }\n      })\n    }\n  },\n\n  getUserInfo(e: any) {\n    console.log(e)\n    app.globalData.userInfo = e.detail.userInfo\n    this.setData!({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true\n    })\n  }\n})\n\n```\n\n代码第8行我们可以看到一个data变量。这个变量用来制定index文件内可以调用的数据。我们先把data内的无用内容删除掉，然后我们对它进行一个修改，添加一些mock data，命名为mockMessages。结果如下：\n\n```javascript\n//index.js\n//获取应用实例\nimport { IMyApp } from '../../app'\n\nconst app = getApp<IMyApp>()\n\nPage({\n  data: {\n\tmockMessages: ['Hello Asuka!', 'I am asuka user1', 'Who is it there?']\n  },\n  //事件处理函数\n  bindViewTap() {\n    wx.navigateTo({\n      url: '../logs/logs'\n    })\n  },\n  onLoad() {\n    if (app.globalData.userInfo) {\n      this.setData!({\n        userInfo: app.globalData.userInfo,\n        hasUserInfo: true,\n      })\n    } else if (this.data.canIUse){\n      // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回\n      // 所以此处加入 callback 以防止这种情况\n      app.userInfoReadyCallback = (res) => {\n        this.setData!({\n          userInfo: res,\n          hasUserInfo: true\n        })\n      }\n    } else {\n      // 在没有 open-type=getUserInfo 版本的兼容处理\n      wx.getUserInfo({\n        success: res => {\n          app.globalData.userInfo = res.userInfo\n          this.setData!({\n            userInfo: res.userInfo,\n            hasUserInfo: true\n          })\n        }\n      })\n    }\n  },\n\n  getUserInfo(e: any) {\n    console.log(e)\n    app.globalData.userInfo = e.detail.userInfo\n    this.setData!({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true\n    })\n  }\n})\n\n```\n\nmockMessage是一个字符串的数组，里面有三条信息。\n\n此时我们已经有了数据，那么下一步就是要添加到我们的index页面中。\n\n通过阅读微信小程序的开发文档，在组建选项卡下，我找到了一个组件叫 [scroll-view](https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html) 。从字面意思我们就可以猜到这个是一个可以滚动的视图。可以滚动的意思是说，当我们的内容太多的时候，屏幕无法一次全部展示，这个组件可以让其滚动起来展示更多的内容。小程序的布局文件都是以wxml结尾的，我们打开index.wxml文件，刚才我们已经将内部无用的部分删除，所以我们在内部添加一个scroll-view。结果如下：\n\n```html\n<!--index.wxml-->\n<view class=\"container\">\n \t<scroll-view>\n    </scroll-view>\n</view>\n```\n\n在scroll-view中间，我们需要展示我们的mockMessages。\n\n先来看一下结果代码：\n\n```html\n<!--index.wxml-->\n<view class=\"container\">\n \t<scroll-view>\n    <view wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n</view>\n```\n\n我们这里用到了scroll-view，view两个组件。并且用到了小程序的列表渲染语法wx:for。我们在view中使用了wx:for的意义是，这个for循环会循环创建view。而循环的数组就是我们的mockMessages。接下来，如果你和我一样使用的是TypeScript工程，在微信开发者工具上点击Compile按钮。你可能会遇到tsc not found的错误输出。不要担心，在terminal中使用：\n\n```\nsudo npm install typescript -g\n```\n\n全局安装typescript的编译器。如果你又遇到了npm not found，那你应该去安装[nodejs](https://nodejs.org/en/)了。安装好后再执行上一条命令安装typescript。\n\n此时我们会得到这样一个结果：\n\n![asuka01](/img//asuka01.png)\n\n## ugly!!!\n\n丑爆了！不要担心，我们来美化一下它。\n\n\n\n![asuka02](/img//asuka02.png)\n\n## Better\n\n现在看起来就好了很多了。主要的原因是我们为每一条信息都加了一些美化渲染。这里我们加了居中布局，和阴影效果，那么我们去学怎么实现它。打开index.wxss文件，删掉里面的内容，然后将内容改为如下所示：\n\n```css\n/**index.wxss**/\n.message{\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 60px;\n  box-shadow: 3px 3px 3px grey;\n}\n```\n\n这里我们创建了一个message类，前面的的句点\".\"是css里定义类的语法。里面加了margin布局，display使用了flex，然后布局选择了居中，最小高度是60px，以及box-shadow加了3px偏量和grey色。\n\n回到index.wxml文件，修改为如下：\n\n```html\n<!--index.wxml-->\n<view>\n  <scroll-view>\n    <view class=\"message\" wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n</view>\n```\n\n这里我们注意到，我们在view内加入了class=\"message\"，并且把最外层的view里的class=\"container\"删除掉了。修改后变可以得到我们的效果样式。\n\n下一步就是增加一个输入框了。\n\n在index.wxml中新增一个input组件：\n\n```html\n<!--index.wxml-->\n<view>\n  <scroll-view>\n    <view class=\"message\" wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n  <input class='input' placeholder='type...'></input>\n</view>\n\n```\n\n可以看到我们还为input选择了input类，所以我们在index.wxss中新增input类：\n\n```css\n/**index.wxss**/\n.message{\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 60px;\n  box-shadow: 3px 3px 3px grey;\n}\n\n.input {\n  margin: 20px;\n}\n```\n\n结果如下：\n\n![asuka03](/img/asuka03.png)\n\n结果还不错，但是还不够，因为我们希望这个type输入框是在底部的。所以我们还要调整一下.input类的设置。修改代码如下：\n\n\n\n```css\n/**index.wxss**/\n.message{\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 60px;\n  box-shadow: 3px 3px 3px grey;\n}\n\n.input {\n  position: fixed;\n  padding: 20px;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background-color: white;\n}\n```\n\n\n\n结果如下：\n\n![asuka04](/img/asuka04.png)\n\n\n\n此时我们还需要一个按钮了。该怎么添加呢？\n\n首先请看index.wxml的代码：\n\n\n\n```html\n<!--index.wxml-->\n<view>\n  <scroll-view>\n    <view class=\"message\" wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n  <view class='footer'>\n    <input class='input' placeholder='type...'/>\n    <button class='send-button' size='mini'>SEND</button>\n  </view>\n</view>\n\n```\n\n我们不仅添加了一个button组件，我们还在input以及button组件的外围添加了一层view组件，对input和button进行了包裹。并且创建了一个footer class来定义view的样式。button也有自己的send-button class来定义自己的样式。我们再去到index.wxss：\n\n```css\n/**index.wxss**/\n.message{\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 60px;\n  box-shadow: 3px 3px 3px grey;\n}\n\n.footer {\n  position: fixed;\n  padding: 10px;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background-color: yellow;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.send-button {\n  margin: 5px;\n}\n.input {\n  width: 60%;\n}\n```\n\n最终我们可以看到如下结果：\n\n![asuka05](/img/asuka05.png)\n\n\n\n这样，Asuka的UI布局，整体就完成了！看着还不错，学到了吗？有问题可以留言。","source":"_posts/从零开始开发你第一个微信小程序教程tutorial-part2.md","raw":"---\nuuid: 24203300-eec8-11e8-9ab0-e176216747e5\ntitle: 从零开始开发你第一个微信小程序教程tutorial-part2\ndate: 2018-11-23 10:33:20\ntags:\nfeatured_image: /img/asuka05.png\n---\n\n在上一篇中，我们已经创建了一个微信小程序工程，这一篇，我们将开始开发微信小程序Asuka。\n\n在创建工程的时候，我选择了使用TypeScript语法的工程。TypeScript相对于JavaScript来说，多了类型描述，并且TypeScript完全支持JavaScript语法，所以不必担心。\n\n首先，大家可以在Utils目录下，找到app.json文件，并且打开它。\n\n```javascript\n{\n  \"pages\":[\n    \"pages/index/index\",\n    \"pages/logs/logs\"\n  ],\n  \"window\":{\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarBackgroundColor\": \"#fff\",\n    \"navigationBarTitleText\": \"WeChat\",\n    \"navigationBarTextStyle\":\"black\"\n  }\n}\n```\n\n\n\napp.json文件是整个小程序的配置文件，这里有小程序一些基本设置。其中pages项描述了小程序内包含的页面，之类我们看到包含了两个页面，一个是index，一个是logs，这两个页面我们可以在pages目录中找到。由于index页面放在了第一位，所以这个就是小程序打开时所展示的页面。\n\n然后我们进入index.wxml页面，打开后可以看到如下代码。\n\n```html\n<!--index.wxml-->\n<view class=\"container\">\n  <view class=\"userinfo\">\n    <button wx:if=\"{{!hasUserInfo && canIUse}}\" open-type=\"getUserInfo\" bindgetuserinfo=\"getUserInfo\"> 获取头像昵称 </button>\n    <block wx:else>\n      <image bindtap=\"bindViewTap\" class=\"userinfo-avatar\" src=\"{{userInfo.avatarUrl}}\" mode=\"cover\"></image>\n      <text class=\"userinfo-nickname\">{{userInfo.nickName}}</text>\n    </block>\n  </view>\n  <view class=\"usermotto\">\n    <text class=\"user-motto\">{{motto}}</text>\n  </view>\n</view>\n```\n\n\n\n这是微信小程序创建的模版代码，现在我们就来修改它，来构建我们Asuka小程序的UI布局。\n\n我们将代码的2-12行全部删除。结果如下：\n\n```html\n<!--index.wxml-->\n<view class=\"container\">\n \n    \n    \n    \n    \n    \n    \n    \n    \n    \n</view>\n```\n\n\n\n![asukaui1](/img/asukaui1.png)\n\n根据我们的UI，Asuka可以分成两个部分，上部的留言列表，下部的内容编辑区域和发送按钮。\n\n由于现在我们还没有数据库，所以我们先做一些mock data（mock data是用来快速实现功能而创建的假数据）。\n\n现在打开index.ts文件（如果在创建时没有选择TypeScript工程，那可以打开index.js文件），内容如下：\n\n```javascript\n//index.js\n//获取应用实例\nimport { IMyApp } from '../../app'\n\nconst app = getApp<IMyApp>()\n\nPage({\n  data: {\n    motto: '点击 “编译” 以构建',\n    userInfo: {},\n    hasUserInfo: false,\n    canIUse: wx.canIUse('button.open-type.getUserInfo'),\n  },\n  //事件处理函数\n  bindViewTap() {\n    wx.navigateTo({\n      url: '../logs/logs'\n    })\n  },\n  onLoad() {\n    if (app.globalData.userInfo) {\n      this.setData!({\n        userInfo: app.globalData.userInfo,\n        hasUserInfo: true,\n      })\n    } else if (this.data.canIUse){\n      // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回\n      // 所以此处加入 callback 以防止这种情况\n      app.userInfoReadyCallback = (res) => {\n        this.setData!({\n          userInfo: res,\n          hasUserInfo: true\n        })\n      }\n    } else {\n      // 在没有 open-type=getUserInfo 版本的兼容处理\n      wx.getUserInfo({\n        success: res => {\n          app.globalData.userInfo = res.userInfo\n          this.setData!({\n            userInfo: res.userInfo,\n            hasUserInfo: true\n          })\n        }\n      })\n    }\n  },\n\n  getUserInfo(e: any) {\n    console.log(e)\n    app.globalData.userInfo = e.detail.userInfo\n    this.setData!({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true\n    })\n  }\n})\n\n```\n\n代码第8行我们可以看到一个data变量。这个变量用来制定index文件内可以调用的数据。我们先把data内的无用内容删除掉，然后我们对它进行一个修改，添加一些mock data，命名为mockMessages。结果如下：\n\n```javascript\n//index.js\n//获取应用实例\nimport { IMyApp } from '../../app'\n\nconst app = getApp<IMyApp>()\n\nPage({\n  data: {\n\tmockMessages: ['Hello Asuka!', 'I am asuka user1', 'Who is it there?']\n  },\n  //事件处理函数\n  bindViewTap() {\n    wx.navigateTo({\n      url: '../logs/logs'\n    })\n  },\n  onLoad() {\n    if (app.globalData.userInfo) {\n      this.setData!({\n        userInfo: app.globalData.userInfo,\n        hasUserInfo: true,\n      })\n    } else if (this.data.canIUse){\n      // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回\n      // 所以此处加入 callback 以防止这种情况\n      app.userInfoReadyCallback = (res) => {\n        this.setData!({\n          userInfo: res,\n          hasUserInfo: true\n        })\n      }\n    } else {\n      // 在没有 open-type=getUserInfo 版本的兼容处理\n      wx.getUserInfo({\n        success: res => {\n          app.globalData.userInfo = res.userInfo\n          this.setData!({\n            userInfo: res.userInfo,\n            hasUserInfo: true\n          })\n        }\n      })\n    }\n  },\n\n  getUserInfo(e: any) {\n    console.log(e)\n    app.globalData.userInfo = e.detail.userInfo\n    this.setData!({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true\n    })\n  }\n})\n\n```\n\nmockMessage是一个字符串的数组，里面有三条信息。\n\n此时我们已经有了数据，那么下一步就是要添加到我们的index页面中。\n\n通过阅读微信小程序的开发文档，在组建选项卡下，我找到了一个组件叫 [scroll-view](https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html) 。从字面意思我们就可以猜到这个是一个可以滚动的视图。可以滚动的意思是说，当我们的内容太多的时候，屏幕无法一次全部展示，这个组件可以让其滚动起来展示更多的内容。小程序的布局文件都是以wxml结尾的，我们打开index.wxml文件，刚才我们已经将内部无用的部分删除，所以我们在内部添加一个scroll-view。结果如下：\n\n```html\n<!--index.wxml-->\n<view class=\"container\">\n \t<scroll-view>\n    </scroll-view>\n</view>\n```\n\n在scroll-view中间，我们需要展示我们的mockMessages。\n\n先来看一下结果代码：\n\n```html\n<!--index.wxml-->\n<view class=\"container\">\n \t<scroll-view>\n    <view wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n</view>\n```\n\n我们这里用到了scroll-view，view两个组件。并且用到了小程序的列表渲染语法wx:for。我们在view中使用了wx:for的意义是，这个for循环会循环创建view。而循环的数组就是我们的mockMessages。接下来，如果你和我一样使用的是TypeScript工程，在微信开发者工具上点击Compile按钮。你可能会遇到tsc not found的错误输出。不要担心，在terminal中使用：\n\n```\nsudo npm install typescript -g\n```\n\n全局安装typescript的编译器。如果你又遇到了npm not found，那你应该去安装[nodejs](https://nodejs.org/en/)了。安装好后再执行上一条命令安装typescript。\n\n此时我们会得到这样一个结果：\n\n![asuka01](/img//asuka01.png)\n\n## ugly!!!\n\n丑爆了！不要担心，我们来美化一下它。\n\n\n\n![asuka02](/img//asuka02.png)\n\n## Better\n\n现在看起来就好了很多了。主要的原因是我们为每一条信息都加了一些美化渲染。这里我们加了居中布局，和阴影效果，那么我们去学怎么实现它。打开index.wxss文件，删掉里面的内容，然后将内容改为如下所示：\n\n```css\n/**index.wxss**/\n.message{\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 60px;\n  box-shadow: 3px 3px 3px grey;\n}\n```\n\n这里我们创建了一个message类，前面的的句点\".\"是css里定义类的语法。里面加了margin布局，display使用了flex，然后布局选择了居中，最小高度是60px，以及box-shadow加了3px偏量和grey色。\n\n回到index.wxml文件，修改为如下：\n\n```html\n<!--index.wxml-->\n<view>\n  <scroll-view>\n    <view class=\"message\" wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n</view>\n```\n\n这里我们注意到，我们在view内加入了class=\"message\"，并且把最外层的view里的class=\"container\"删除掉了。修改后变可以得到我们的效果样式。\n\n下一步就是增加一个输入框了。\n\n在index.wxml中新增一个input组件：\n\n```html\n<!--index.wxml-->\n<view>\n  <scroll-view>\n    <view class=\"message\" wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n  <input class='input' placeholder='type...'></input>\n</view>\n\n```\n\n可以看到我们还为input选择了input类，所以我们在index.wxss中新增input类：\n\n```css\n/**index.wxss**/\n.message{\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 60px;\n  box-shadow: 3px 3px 3px grey;\n}\n\n.input {\n  margin: 20px;\n}\n```\n\n结果如下：\n\n![asuka03](/img/asuka03.png)\n\n结果还不错，但是还不够，因为我们希望这个type输入框是在底部的。所以我们还要调整一下.input类的设置。修改代码如下：\n\n\n\n```css\n/**index.wxss**/\n.message{\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 60px;\n  box-shadow: 3px 3px 3px grey;\n}\n\n.input {\n  position: fixed;\n  padding: 20px;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background-color: white;\n}\n```\n\n\n\n结果如下：\n\n![asuka04](/img/asuka04.png)\n\n\n\n此时我们还需要一个按钮了。该怎么添加呢？\n\n首先请看index.wxml的代码：\n\n\n\n```html\n<!--index.wxml-->\n<view>\n  <scroll-view>\n    <view class=\"message\" wx:for=\"{{mockMessages}}\" wx:for-item=\"item\">\n    {{item}}\n    </view>\n  </scroll-view>\n  <view class='footer'>\n    <input class='input' placeholder='type...'/>\n    <button class='send-button' size='mini'>SEND</button>\n  </view>\n</view>\n\n```\n\n我们不仅添加了一个button组件，我们还在input以及button组件的外围添加了一层view组件，对input和button进行了包裹。并且创建了一个footer class来定义view的样式。button也有自己的send-button class来定义自己的样式。我们再去到index.wxss：\n\n```css\n/**index.wxss**/\n.message{\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 60px;\n  box-shadow: 3px 3px 3px grey;\n}\n\n.footer {\n  position: fixed;\n  padding: 10px;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background-color: yellow;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.send-button {\n  margin: 5px;\n}\n.input {\n  width: 60%;\n}\n```\n\n最终我们可以看到如下结果：\n\n![asuka05](/img/asuka05.png)\n\n\n\n这样，Asuka的UI布局，整体就完成了！看着还不错，学到了吗？有问题可以留言。","slug":"从零开始开发你第一个微信小程序教程tutorial-part2","published":1,"updated":"2018-12-17T11:05:20.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpz8kkai00078tk9osq48ies","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">在上一篇中，我们已经创建了一个微信小程序工程，这一篇，我们将开始开发微信小程序Asuka。<p></p>\n<p>在创建工程的时候，我选择了使用TypeScript语法的工程。TypeScript相对于JavaScript来说，多了类型描述，并且TypeScript完全支持JavaScript语法，所以不必担心。</p>\n<p>首先，大家可以在Utils目录下，找到app.json文件，并且打开它。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"hljs-string\">\"pages\"</span>:[</span><br><span class=\"line\">    <span class=\"hljs-string\">\"pages/index/index\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"pages/logs/logs\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-string\">\"window\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"hljs-string\">\"backgroundTextStyle\"</span>:<span class=\"hljs-string\">\"light\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"navigationBarBackgroundColor\"</span>: <span class=\"hljs-string\">\"#fff\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"navigationBarTitleText\"</span>: <span class=\"hljs-string\">\"WeChat\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"navigationBarTextStyle\"</span>:<span class=\"hljs-string\">\"black\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>app.json文件是整个小程序的配置文件，这里有小程序一些基本设置。其中pages项描述了小程序内包含的页面，之类我们看到包含了两个页面，一个是index，一个是logs，这两个页面我们可以在pages目录中找到。由于index页面放在了第一位，所以这个就是小程序打开时所展示的页面。</p>\n<p>然后我们进入index.wxml页面，打开后可以看到如下代码。</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"userinfo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">wx:if</span>=<span class=\"hljs-string\">\"&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;\"</span> <span class=\"hljs-attr\">open-type</span>=<span class=\"hljs-string\">\"getUserInfo\"</span> <span class=\"hljs-attr\">bindgetuserinfo</span>=<span class=\"hljs-string\">\"getUserInfo\"</span>&gt;</span> 获取头像昵称 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">wx:else</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">\"bindViewTap\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"userinfo-avatar\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"&#123;&#123;userInfo.avatarUrl&#125;&#125;\"</span> <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">\"cover\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"userinfo-nickname\"</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"usermotto\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"user-motto\"</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是微信小程序创建的模版代码，现在我们就来修改它，来构建我们Asuka小程序的UI布局。</p>\n<p>我们将代码的2-12行全部删除。结果如下：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"/img/asukaui1.png\" title=\"asukaui1\" class=\"gallery-item\"><img src=\"/img/asukaui1.png\" alt=\"asukaui1\"></a></p>\n<p>根据我们的UI，Asuka可以分成两个部分，上部的留言列表，下部的内容编辑区域和发送按钮。</p>\n<p>由于现在我们还没有数据库，所以我们先做一些mock data（mock data是用来快速实现功能而创建的假数据）。</p>\n<p>现在打开index.ts文件（如果在创建时没有选择TypeScript工程，那可以打开index.js文件），内容如下：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//index.js</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//获取应用实例</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; IMyApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../app'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = getApp&lt;IMyApp&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    motto: <span class=\"hljs-string\">'点击 “编译” 以构建'</span>,</span><br><span class=\"line\">    userInfo: &#123;&#125;,</span><br><span class=\"line\">    hasUserInfo: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">    canIUse: wx.canIUse(<span class=\"hljs-string\">'button.open-type.getUserInfo'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"hljs-comment\">//事件处理函数</span></span><br><span class=\"line\">  bindViewTap() &#123;</span><br><span class=\"line\">    wx.navigateTo(&#123;</span><br><span class=\"line\">      url: <span class=\"hljs-string\">'../logs/logs'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (app.globalData.userInfo) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">        userInfo: app.globalData.userInfo,</span><br><span class=\"line\">        hasUserInfo: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.data.canIUse)&#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 所以此处加入 callback 以防止这种情况</span></span><br><span class=\"line\">      app.userInfoReadyCallback = <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">          userInfo: res,</span><br><span class=\"line\">          hasUserInfo: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 在没有 open-type=getUserInfo 版本的兼容处理</span></span><br><span class=\"line\">      wx.getUserInfo(&#123;</span><br><span class=\"line\">        success: <span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          app.globalData.userInfo = res.userInfo</span><br><span class=\"line\">          <span class=\"hljs-keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">            userInfo: res.userInfo,</span><br><span class=\"line\">            hasUserInfo: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getUserInfo(e: any) &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(e)</span><br><span class=\"line\">    app.globalData.userInfo = e.detail.userInfo</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">      userInfo: e.detail.userInfo,</span><br><span class=\"line\">      hasUserInfo: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>代码第8行我们可以看到一个data变量。这个变量用来制定index文件内可以调用的数据。我们先把data内的无用内容删除掉，然后我们对它进行一个修改，添加一些mock data，命名为mockMessages。结果如下：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//index.js</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//获取应用实例</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; IMyApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../app'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = getApp&lt;IMyApp&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">truemockMessages: [<span class=\"hljs-string\">'Hello Asuka!'</span>, <span class=\"hljs-string\">'I am asuka user1'</span>, <span class=\"hljs-string\">'Who is it there?'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"hljs-comment\">//事件处理函数</span></span><br><span class=\"line\">  bindViewTap() &#123;</span><br><span class=\"line\">    wx.navigateTo(&#123;</span><br><span class=\"line\">      url: <span class=\"hljs-string\">'../logs/logs'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (app.globalData.userInfo) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">        userInfo: app.globalData.userInfo,</span><br><span class=\"line\">        hasUserInfo: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.data.canIUse)&#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 所以此处加入 callback 以防止这种情况</span></span><br><span class=\"line\">      app.userInfoReadyCallback = <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">          userInfo: res,</span><br><span class=\"line\">          hasUserInfo: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 在没有 open-type=getUserInfo 版本的兼容处理</span></span><br><span class=\"line\">      wx.getUserInfo(&#123;</span><br><span class=\"line\">        success: <span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          app.globalData.userInfo = res.userInfo</span><br><span class=\"line\">          <span class=\"hljs-keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">            userInfo: res.userInfo,</span><br><span class=\"line\">            hasUserInfo: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getUserInfo(e: any) &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(e)</span><br><span class=\"line\">    app.globalData.userInfo = e.detail.userInfo</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">      userInfo: e.detail.userInfo,</span><br><span class=\"line\">      hasUserInfo: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>mockMessage是一个字符串的数组，里面有三条信息。</p>\n<p>此时我们已经有了数据，那么下一步就是要添加到我们的index页面中。</p>\n<p>通过阅读微信小程序的开发文档，在组建选项卡下，我找到了一个组件叫 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html\" target=\"_blank\" rel=\"noopener\">scroll-view</a> 。从字面意思我们就可以猜到这个是一个可以滚动的视图。可以滚动的意思是说，当我们的内容太多的时候，屏幕无法一次全部展示，这个组件可以让其滚动起来展示更多的内容。小程序的布局文件都是以wxml结尾的，我们打开index.wxml文件，刚才我们已经将内部无用的部分删除，所以我们在内部添加一个scroll-view。结果如下：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在scroll-view中间，我们需要展示我们的mockMessages。</p>\n<p>先来看一下结果代码：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"hljs-attr\">wx:for-item</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们这里用到了scroll-view，view两个组件。并且用到了小程序的列表渲染语法wx:for。我们在view中使用了wx:for的意义是，这个for循环会循环创建view。而循环的数组就是我们的mockMessages。接下来，如果你和我一样使用的是TypeScript工程，在微信开发者工具上点击Compile按钮。你可能会遇到tsc not found的错误输出。不要担心，在terminal中使用：</p>\n<figure class=\"highlight cmake hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm <span class=\"hljs-keyword\">install</span> typescript -g</span><br></pre></td></tr></table></figure>\n<p>全局安装typescript的编译器。如果你又遇到了npm not found，那你应该去安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">nodejs</a>了。安装好后再执行上一条命令安装typescript。</p>\n<p>此时我们会得到这样一个结果：</p>\n<p><a href=\"/img//asuka01.png\" title=\"asuka01\" class=\"gallery-item\"><img src=\"/img//asuka01.png\" alt=\"asuka01\"></a></p>\n<h2 id=\"ugly\"><a href=\"#ugly\" class=\"headerlink\" title=\"ugly!!!\"></a>ugly!!!</h2><p>丑爆了！不要担心，我们来美化一下它。</p>\n<p><a href=\"/img//asuka02.png\" title=\"asuka02\" class=\"gallery-item\"><img src=\"/img//asuka02.png\" alt=\"asuka02\"></a></p>\n<h2 id=\"Better\"><a href=\"#Better\" class=\"headerlink\" title=\"Better\"></a>Better</h2><p>现在看起来就好了很多了。主要的原因是我们为每一条信息都加了一些美化渲染。这里我们加了居中布局，和阴影效果，那么我们去学怎么实现它。打开index.wxss文件，删掉里面的内容，然后将内容改为如下所示：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/**index.wxss**/</span></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.message</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">min-height</span>: <span class=\"hljs-number\">60px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">3px</span> <span class=\"hljs-number\">3px</span> <span class=\"hljs-number\">3px</span> grey;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们创建了一个message类，前面的的句点”.”是css里定义类的语法。里面加了margin布局，display使用了flex，然后布局选择了居中，最小高度是60px，以及box-shadow加了3px偏量和grey色。</p>\n<p>回到index.wxml文件，修改为如下：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"hljs-attr\">wx:for-item</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里我们注意到，我们在view内加入了class=”message”，并且把最外层的view里的class=”container”删除掉了。修改后变可以得到我们的效果样式。</p>\n<p>下一步就是增加一个输入框了。</p>\n<p>在index.wxml中新增一个input组件：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"hljs-attr\">wx:for-item</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'input'</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'type...'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">input</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到我们还为input选择了input类，所以我们在index.wxss中新增input类：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/**index.wxss**/</span></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.message</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">min-height</span>: <span class=\"hljs-number\">60px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">3px</span> <span class=\"hljs-number\">3px</span> <span class=\"hljs-number\">3px</span> grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.input</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><a href=\"/img/asuka03.png\" title=\"asuka03\" class=\"gallery-item\"><img src=\"/img/asuka03.png\" alt=\"asuka03\"></a></p>\n<p>结果还不错，但是还不够，因为我们希望这个type输入框是在底部的。所以我们还要调整一下.input类的设置。修改代码如下：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/**index.wxss**/</span></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.message</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">min-height</span>: <span class=\"hljs-number\">60px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">3px</span> <span class=\"hljs-number\">3px</span> <span class=\"hljs-number\">3px</span> grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.input</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">bottom</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><a href=\"/img/asuka04.png\" title=\"asuka04\" class=\"gallery-item\"><img src=\"/img/asuka04.png\" alt=\"asuka04\"></a></p>\n<p>此时我们还需要一个按钮了。该怎么添加呢？</p>\n<p>首先请看index.wxml的代码：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"hljs-attr\">wx:for-item</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'footer'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'input'</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'type...'</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'send-button'</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">'mini'</span>&gt;</span>SEND<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们不仅添加了一个button组件，我们还在input以及button组件的外围添加了一层view组件，对input和button进行了包裹。并且创建了一个footer class来定义view的样式。button也有自己的send-button class来定义自己的样式。我们再去到index.wxss：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/**index.wxss**/</span></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.message</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">min-height</span>: <span class=\"hljs-number\">60px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">3px</span> <span class=\"hljs-number\">3px</span> <span class=\"hljs-number\">3px</span> grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">bottom</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: yellow;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.send-button</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.input</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">60%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终我们可以看到如下结果：</p>\n<p><a href=\"/img/asuka05.png\" title=\"asuka05\" class=\"gallery-item\"><img src=\"/img/asuka05.png\" alt=\"asuka05\"></a></p>\n<p>这样，Asuka的UI布局，整体就完成了！看着还不错，学到了吗？有问题可以留言。</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"在上一篇中，我们已经创建了一个微信小程序工程，这一篇，我们将开始开发微信小程序Asuka。\n\n在创建工程的时候，我选择了使用TypeScript语法的工程。TypeScript相对于JavaScript来说，多了类型描述，并且TypeScript完全支持JavaScript语法，所以不必担心。\n\n首先，大家可以在Utils目录下，找到app.json文件，并且打开它。\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n{\n  \"pages\":[\n    \"pages/index/index\",\n    \"pages/logs/logs\"\n  ],\n  \"window\":{\n    \"","more":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p=\"\">在上一篇中，我们已经创建了一个微信小程序工程，这一篇，我们将开始开发微信小程序Asuka。<p></p>\n<p>在创建工程的时候，我选择了使用TypeScript语法的工程。TypeScript相对于JavaScript来说，多了类型描述，并且TypeScript完全支持JavaScript语法，所以不必担心。</p>\n<p>首先，大家可以在Utils目录下，找到app.json文件，并且打开它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"pages\"</span>:[</span><br><span class=\"line\">    <span class=\"string\">\"pages/index/index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pages/logs/logs\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"window\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"backgroundTextStyle\"</span>:<span class=\"string\">\"light\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"navigationBarBackgroundColor\"</span>: <span class=\"string\">\"#fff\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"navigationBarTitleText\"</span>: <span class=\"string\">\"WeChat\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"navigationBarTextStyle\"</span>:<span class=\"string\">\"black\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>app.json文件是整个小程序的配置文件，这里有小程序一些基本设置。其中pages项描述了小程序内包含的页面，之类我们看到包含了两个页面，一个是index，一个是logs，这两个页面我们可以在pages目录中找到。由于index页面放在了第一位，所以这个就是小程序打开时所展示的页面。</p>\n<p>然后我们进入index.wxml页面，打开后可以看到如下代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userinfo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;\"</span> <span class=\"attr\">open-type</span>=<span class=\"string\">\"getUserInfo\"</span> <span class=\"attr\">bindgetuserinfo</span>=<span class=\"string\">\"getUserInfo\"</span>&gt;</span> 获取头像昵称 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:else</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"bindViewTap\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userinfo-avatar\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;userInfo.avatarUrl&#125;&#125;\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"cover\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userinfo-nickname\"</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"usermotto\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user-motto\"</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是微信小程序创建的模版代码，现在我们就来修改它，来构建我们Asuka小程序的UI布局。</p>\n<p>我们将代码的2-12行全部删除。结果如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"/img/asukaui1.png\" title=\"asukaui1\" class=\"gallery-item\"><img src=\"/img/asukaui1.png\" alt=\"asukaui1\"></a></p>\n<p>根据我们的UI，Asuka可以分成两个部分，上部的留言列表，下部的内容编辑区域和发送按钮。</p>\n<p>由于现在我们还没有数据库，所以我们先做一些mock data（mock data是用来快速实现功能而创建的假数据）。</p>\n<p>现在打开index.ts文件（如果在创建时没有选择TypeScript工程，那可以打开index.js文件），内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"comment\">//获取应用实例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; IMyApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../app'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = getApp&lt;IMyApp&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    motto: <span class=\"string\">'点击 “编译” 以构建'</span>,</span><br><span class=\"line\">    userInfo: &#123;&#125;,</span><br><span class=\"line\">    hasUserInfo: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    canIUse: wx.canIUse(<span class=\"string\">'button.open-type.getUserInfo'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//事件处理函数</span></span><br><span class=\"line\">  bindViewTap() &#123;</span><br><span class=\"line\">    wx.navigateTo(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'../logs/logs'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (app.globalData.userInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">        userInfo: app.globalData.userInfo,</span><br><span class=\"line\">        hasUserInfo: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.data.canIUse)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class=\"line\">      <span class=\"comment\">// 所以此处加入 callback 以防止这种情况</span></span><br><span class=\"line\">      app.userInfoReadyCallback = <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">          userInfo: res,</span><br><span class=\"line\">          hasUserInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在没有 open-type=getUserInfo 版本的兼容处理</span></span><br><span class=\"line\">      wx.getUserInfo(&#123;</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          app.globalData.userInfo = res.userInfo</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">            userInfo: res.userInfo,</span><br><span class=\"line\">            hasUserInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getUserInfo(e: any) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">    app.globalData.userInfo = e.detail.userInfo</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">      userInfo: e.detail.userInfo,</span><br><span class=\"line\">      hasUserInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>代码第8行我们可以看到一个data变量。这个变量用来制定index文件内可以调用的数据。我们先把data内的无用内容删除掉，然后我们对它进行一个修改，添加一些mock data，命名为mockMessages。结果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"comment\">//获取应用实例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; IMyApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../app'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = getApp&lt;IMyApp&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">truemockMessages: [<span class=\"string\">'Hello Asuka!'</span>, <span class=\"string\">'I am asuka user1'</span>, <span class=\"string\">'Who is it there?'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//事件处理函数</span></span><br><span class=\"line\">  bindViewTap() &#123;</span><br><span class=\"line\">    wx.navigateTo(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'../logs/logs'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (app.globalData.userInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">        userInfo: app.globalData.userInfo,</span><br><span class=\"line\">        hasUserInfo: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.data.canIUse)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class=\"line\">      <span class=\"comment\">// 所以此处加入 callback 以防止这种情况</span></span><br><span class=\"line\">      app.userInfoReadyCallback = <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">          userInfo: res,</span><br><span class=\"line\">          hasUserInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在没有 open-type=getUserInfo 版本的兼容处理</span></span><br><span class=\"line\">      wx.getUserInfo(&#123;</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          app.globalData.userInfo = res.userInfo</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">            userInfo: res.userInfo,</span><br><span class=\"line\">            hasUserInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getUserInfo(e: any) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">    app.globalData.userInfo = e.detail.userInfo</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setData!(&#123;</span><br><span class=\"line\">      userInfo: e.detail.userInfo,</span><br><span class=\"line\">      hasUserInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>mockMessage是一个字符串的数组，里面有三条信息。</p>\n<p>此时我们已经有了数据，那么下一步就是要添加到我们的index页面中。</p>\n<p>通过阅读微信小程序的开发文档，在组建选项卡下，我找到了一个组件叫 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html\" target=\"_blank\" rel=\"noopener\">scroll-view</a> 。从字面意思我们就可以猜到这个是一个可以滚动的视图。可以滚动的意思是说，当我们的内容太多的时候，屏幕无法一次全部展示，这个组件可以让其滚动起来展示更多的内容。小程序的布局文件都是以wxml结尾的，我们打开index.wxml文件，刚才我们已经将内部无用的部分删除，所以我们在内部添加一个scroll-view。结果如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在scroll-view中间，我们需要展示我们的mockMessages。</p>\n<p>先来看一下结果代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"attr\">wx:for-item</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们这里用到了scroll-view，view两个组件。并且用到了小程序的列表渲染语法wx:for。我们在view中使用了wx:for的意义是，这个for循环会循环创建view。而循环的数组就是我们的mockMessages。接下来，如果你和我一样使用的是TypeScript工程，在微信开发者工具上点击Compile按钮。你可能会遇到tsc not found的错误输出。不要担心，在terminal中使用：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm <span class=\"keyword\">install</span> typescript -g</span><br></pre></td></tr></table></figure>\n<p>全局安装typescript的编译器。如果你又遇到了npm not found，那你应该去安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">nodejs</a>了。安装好后再执行上一条命令安装typescript。</p>\n<p>此时我们会得到这样一个结果：</p>\n<p><a href=\"/img//asuka01.png\" title=\"asuka01\" class=\"gallery-item\"><img src=\"/img//asuka01.png\" alt=\"asuka01\"></a></p>\n<h2 id=\"ugly\"><a href=\"#ugly\" class=\"headerlink\" title=\"ugly!!!\"></a>ugly!!!</h2><p>丑爆了！不要担心，我们来美化一下它。</p>\n<p><a href=\"/img//asuka02.png\" title=\"asuka02\" class=\"gallery-item\"><img src=\"/img//asuka02.png\" alt=\"asuka02\"></a></p>\n<h2 id=\"Better\"><a href=\"#Better\" class=\"headerlink\" title=\"Better\"></a>Better</h2><p>现在看起来就好了很多了。主要的原因是我们为每一条信息都加了一些美化渲染。这里我们加了居中布局，和阴影效果，那么我们去学怎么实现它。打开index.wxss文件，删掉里面的内容，然后将内容改为如下所示：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**index.wxss**/</span></span><br><span class=\"line\"><span class=\"selector-class\">.message</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">3px</span> grey;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们创建了一个message类，前面的的句点”.”是css里定义类的语法。里面加了margin布局，display使用了flex，然后布局选择了居中，最小高度是60px，以及box-shadow加了3px偏量和grey色。</p>\n<p>回到index.wxml文件，修改为如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"attr\">wx:for-item</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里我们注意到，我们在view内加入了class=”message”，并且把最外层的view里的class=”container”删除掉了。修改后变可以得到我们的效果样式。</p>\n<p>下一步就是增加一个输入框了。</p>\n<p>在index.wxml中新增一个input组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"attr\">wx:for-item</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">'input'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">'type...'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到我们还为input选择了input类，所以我们在index.wxss中新增input类：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**index.wxss**/</span></span><br><span class=\"line\"><span class=\"selector-class\">.message</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">3px</span> grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><a href=\"/img/asuka03.png\" title=\"asuka03\" class=\"gallery-item\"><img src=\"/img/asuka03.png\" alt=\"asuka03\"></a></p>\n<p>结果还不错，但是还不够，因为我们希望这个type输入框是在底部的。所以我们还要调整一下.input类的设置。修改代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**index.wxss**/</span></span><br><span class=\"line\"><span class=\"selector-class\">.message</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">3px</span> grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><a href=\"/img/asuka04.png\" title=\"asuka04\" class=\"gallery-item\"><img src=\"/img/asuka04.png\" alt=\"asuka04\"></a></p>\n<p>此时我们还需要一个按钮了。该怎么添加呢？</p>\n<p>首先请看index.wxml的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;mockMessages&#125;&#125;\"</span> <span class=\"attr\">wx:for-item</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'footer'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">'input'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">'type...'</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">'send-button'</span> <span class=\"attr\">size</span>=<span class=\"string\">'mini'</span>&gt;</span>SEND<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们不仅添加了一个button组件，我们还在input以及button组件的外围添加了一层view组件，对input和button进行了包裹。并且创建了一个footer class来定义view的样式。button也有自己的send-button class来定义自己的样式。我们再去到index.wxss：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**index.wxss**/</span></span><br><span class=\"line\"><span class=\"selector-class\">.message</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">3px</span> grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.send-button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终我们可以看到如下结果：</p>\n<p><a href=\"/img/asuka05.png\" title=\"asuka05\" class=\"gallery-item\"><img src=\"/img/asuka05.png\" alt=\"asuka05\"></a></p>\n<p>这样，Asuka的UI布局，整体就完成了！看着还不错，学到了吗？有问题可以留言。</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}